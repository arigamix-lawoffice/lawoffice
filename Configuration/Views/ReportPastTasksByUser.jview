{
  "Alias": "ReportPastTasksByUser",
  "Caption": "$Views_Names_ReportPastTasksByUser",
  "Description": "",
  "GroupName": "System",
  "ID::uid": "44b3c3ba-6dc4-4b3b-bd1e-48f939c3a8a1",
  "JsonMetadataSource::txt": "ReportPastTasksByUser JSONMETA",
  "MsQuerySource::txt": "ReportPastTasksByUser MSSQL",
  "PgQuerySource::txt": "ReportPastTasksByUser PGSQL",
  "Roles": [
    {
      "DeltaKind": "Added",
      "ObjectId::uid": "44b3c3ba-6dc4-4b3b-bd1e-48f939c3a8a1",
      "RoleId::uid": "7ff52dc0-ff6a-4c9d-ba25-b562c370004d",
      "RoleName": "All employees"
    }
  ]
}

[TEXTPART ReportPastTasksByUser JSONMETA]
{
  "Alias": "ReportPastTasksByUser",
  "Appearance": null,
  "Appearances": null,
  "AutoSelectFirstRow": true,
  "AutoWidthRowLimit": null,
  "Caption": "$Views_Names_ReportPastTasksByUser",
  "Columns": [
    {
      "Alias": "UserID",
      "Appearance": null,
      "CalendarIDColumn": null,
      "CalendarOverdueFormat": null,
      "CalendarQuantsColumn": null,
      "Caption": null,
      "Condition": null,
      "DisableGrouping": false,
      "HasTag": false,
      "Hidden": true,
      "Localizable": false,
      "MaxLength": null,
      "PlannedColumn": null,
      "SortBy": null,
      "TreatValueAsUtc": false,
      "Type": "$TaskHistory.UserID"
    },
    {
      "Alias": "UserName",
      "Appearance": null,
      "CalendarIDColumn": null,
      "CalendarOverdueFormat": null,
      "CalendarQuantsColumn": null,
      "Caption": "$Views_ReportPastTasksByUser_User",
      "Condition": null,
      "DisableGrouping": false,
      "HasTag": false,
      "Hidden": false,
      "Localizable": false,
      "MaxLength": null,
      "PlannedColumn": null,
      "SortBy": "t.UserName",
      "TreatValueAsUtc": false,
      "Type": "$PersonalRoles.Name"
    },
    {
      "Alias": "OnTime",
      "Appearance": null,
      "CalendarIDColumn": null,
      "CalendarOverdueFormat": null,
      "CalendarQuantsColumn": null,
      "Caption": "$Views_ReportPastTasksByUser_OnTime",
      "Condition": null,
      "DisableGrouping": false,
      "HasTag": false,
      "Hidden": false,
      "Localizable": false,
      "MaxLength": null,
      "PlannedColumn": null,
      "SortBy": "t.OnTime",
      "TreatValueAsUtc": false,
      "Type": "Int64 Null"
    },
    {
      "Alias": "Overdue",
      "Appearance": null,
      "CalendarIDColumn": null,
      "CalendarOverdueFormat": null,
      "CalendarQuantsColumn": null,
      "Caption": "$Views_ReportPastTasksByUser_Overdue",
      "Condition": null,
      "DisableGrouping": false,
      "HasTag": false,
      "Hidden": false,
      "Localizable": false,
      "MaxLength": null,
      "PlannedColumn": null,
      "SortBy": "t.Overdue",
      "TreatValueAsUtc": false,
      "Type": "Int64 Null"
    },
    {
      "Alias": "OverdueAvgDelayPeriod",
      "Appearance": null,
      "CalendarIDColumn": null,
      "CalendarOverdueFormat": null,
      "CalendarQuantsColumn": null,
      "Caption": "$Views_ReportPastTasksByUser_OverdueAvgDelayPeriod",
      "Condition": null,
      "DisableGrouping": false,
      "HasTag": false,
      "Hidden": false,
      "Localizable": false,
      "MaxLength": null,
      "PlannedColumn": null,
      "SortBy": "t.OverdueAvgDelayPeriod",
      "TreatValueAsUtc": false,
      "Type": "Int64 Null"
    },
    {
      "Alias": "Total",
      "Appearance": null,
      "CalendarIDColumn": null,
      "CalendarOverdueFormat": null,
      "CalendarQuantsColumn": null,
      "Caption": "$Views_ReportPastTasksByUser_Total",
      "Condition": null,
      "DisableGrouping": false,
      "HasTag": false,
      "Hidden": false,
      "Localizable": false,
      "MaxLength": null,
      "PlannedColumn": null,
      "SortBy": "t.Total",
      "TreatValueAsUtc": false,
      "Type": "Int64 Null"
    },
    {
      "Alias": "rn",
      "Appearance": null,
      "CalendarIDColumn": null,
      "CalendarOverdueFormat": null,
      "CalendarQuantsColumn": null,
      "Caption": null,
      "Condition": null,
      "DisableGrouping": false,
      "HasTag": false,
      "Hidden": true,
      "Localizable": false,
      "MaxLength": null,
      "PlannedColumn": null,
      "SortBy": null,
      "TreatValueAsUtc": false,
      "Type": "Int64 Null"
    }
  ],
  "ConnectionAlias": null,
  "DefaultSortColumns": [
    {
      "Alias": "UserName",
      "SortDirection": "Ascending"
    }
  ],
  "EnableAutoWidth": false,
  "ExportDataPageLimit": null,
  "Extensions": null,
  "FormatVersion::int": 2,
  "GroupingColumn": null,
  "MultiSelect": false,
  "Overrides": null,
  "PageLimit": null,
  "Paging": "Always",
  "Parameters": [
    {
      "Alias": "CompletionDate",
      "AllowedOperands": null,
      "AutoCompleteInfo": null,
      "Caption": "$Views_ReportPastTasksByUser_CompletionDate_Param",
      "Condition": null,
      "DateTimeType": null,
      "DisallowedOperands": null,
      "DropDownInfo": null,
      "Hidden": true,
      "HideAutoCompleteButton": false,
      "IgnoreCase": true,
      "Multiple": true,
      "RefSection": null,
      "TreatValueAsUtc": false,
      "Type": "$TaskHistory.Completed"
    },
    {
      "Alias": "TypeParam",
      "AllowedOperands": [
        {
          "::single_type": "str"
        },
        "Equality"
      ],
      "AutoCompleteInfo": {
        "ParamAlias": "Caption",
        "PopupColumns": [
          {
            "::single_type": "int"
          },
          1
        ],
        "RefPrefix": null,
        "ViewAlias": "KrTypesEffective"
      },
      "Caption": "$Views_ReportPastTasksByUser_TypeParam_Param",
      "Condition": null,
      "DateTimeType": null,
      "DisallowedOperands": null,
      "DropDownInfo": {
        "PopupColumns": [
          {
            "::single_type": "int"
          },
          1
        ],
        "RefPrefix": null,
        "ViewAlias": "KrTypesEffective"
      },
      "Hidden": false,
      "HideAutoCompleteButton": false,
      "IgnoreCase": true,
      "Multiple": false,
      "RefSection": [
        {
          "::single_type": "str"
        },
        "TypeForView"
      ],
      "TreatValueAsUtc": false,
      "Type": "$DocumentCommonInfo.CardTypeID"
    },
    {
      "Alias": "TaskType",
      "AllowedOperands": null,
      "AutoCompleteInfo": {
        "ParamAlias": "Caption",
        "PopupColumns": null,
        "RefPrefix": null,
        "ViewAlias": "TaskTypes"
      },
      "Caption": "$Views_ReportPastTasksByUser_TaskType_Param",
      "Condition": null,
      "DateTimeType": null,
      "DisallowedOperands": null,
      "DropDownInfo": {
        "PopupColumns": [
          {
            "::single_type": "int"
          },
          1
        ],
        "RefPrefix": null,
        "ViewAlias": "TaskTypes"
      },
      "Hidden": true,
      "HideAutoCompleteButton": false,
      "IgnoreCase": true,
      "Multiple": true,
      "RefSection": [
        {
          "::single_type": "str"
        },
        "TaskTypes"
      ],
      "TreatValueAsUtc": false,
      "Type": "$TaskHistory.TypeID"
    },
    {
      "Alias": "Department",
      "AllowedOperands": null,
      "AutoCompleteInfo": {
        "ParamAlias": "Name",
        "PopupColumns": [
          {
            "::single_type": "int"
          },
          1,
          3,
          5
        ],
        "RefPrefix": null,
        "ViewAlias": "Departments"
      },
      "Caption": "$Views_ReportPastTasksByUser_Department_Param",
      "Condition": null,
      "DateTimeType": null,
      "DisallowedOperands": null,
      "DropDownInfo": null,
      "Hidden": true,
      "HideAutoCompleteButton": false,
      "IgnoreCase": true,
      "Multiple": true,
      "RefSection": [
        {
          "::single_type": "str"
        },
        "DepartmentRoles"
      ],
      "TreatValueAsUtc": false,
      "Type": "$RoleUsers.ID"
    },
    {
      "Alias": "SelUser",
      "AllowedOperands": null,
      "AutoCompleteInfo": {
        "ParamAlias": "Name",
        "PopupColumns": [
          {
            "::single_type": "int"
          },
          1,
          4
        ],
        "RefPrefix": null,
        "ViewAlias": "Users"
      },
      "Caption": "$Views_ReportPastTasksByUser_User_Param",
      "Condition": null,
      "DateTimeType": null,
      "DisallowedOperands": null,
      "DropDownInfo": null,
      "Hidden": true,
      "HideAutoCompleteButton": false,
      "IgnoreCase": true,
      "Multiple": true,
      "RefSection": [
        {
          "::single_type": "str"
        },
        "PersonalRoles"
      ],
      "TreatValueAsUtc": false,
      "Type": "$TaskHistory.UserID"
    },
    {
      "Alias": "Role",
      "AllowedOperands": null,
      "AutoCompleteInfo": {
        "ParamAlias": "Name",
        "PopupColumns": [
          {
            "::single_type": "int"
          },
          1,
          3
        ],
        "RefPrefix": "Role",
        "ViewAlias": "DurableRoles"
      },
      "Caption": "$Views_CompletedTasks_RoleGroup_Param",
      "Condition": null,
      "DateTimeType": null,
      "DisallowedOperands": null,
      "DropDownInfo": null,
      "Hidden": true,
      "HideAutoCompleteButton": false,
      "IgnoreCase": true,
      "Multiple": true,
      "RefSection": [
        {
          "::single_type": "str"
        },
        "Roles"
      ],
      "TreatValueAsUtc": false,
      "Type": "$RoleUsers.ID"
    },
    {
      "Alias": "Option",
      "AllowedOperands": null,
      "AutoCompleteInfo": {
        "ParamAlias": "Caption",
        "PopupColumns": null,
        "RefPrefix": null,
        "ViewAlias": "CompletionOptions"
      },
      "Caption": "$Views_ReportPastTasksByUser_Option_Param",
      "Condition": null,
      "DateTimeType": null,
      "DisallowedOperands": null,
      "DropDownInfo": {
        "PopupColumns": [
          {
            "::single_type": "int"
          },
          1
        ],
        "RefPrefix": null,
        "ViewAlias": "CompletionOptions"
      },
      "Hidden": true,
      "HideAutoCompleteButton": false,
      "IgnoreCase": true,
      "Multiple": true,
      "RefSection": [
        {
          "::single_type": "str"
        },
        "CompletionOptions"
      ],
      "TreatValueAsUtc": false,
      "Type": "$TaskHistory.OptionID"
    }
  ],
  "QuickSearchParam": null,
  "References": null,
  "RowCountSubset": null,
  "RowCounterVisible": false,
  "SelectionMode": "Row",
  "Subsets": null,
  "TagsPosition": "None",
  "TreatAsSingleQuery": false,
  "TreeGroup": null,
  "TreeGroupDisplayValue": null,
  "TreeGroupId": null,
  "TreeGroupParentId": null,
  "TreeId": null,
  "TreeParentId": null
}

[TEXTPART ReportPastTasksByUser MSSQL]
DECLARE @NoRowsInParentDepartment	uniqueidentifier;
DECLARE @TotalID					uniqueidentifier;

/* Используется для предотвращение показа строк, если их нет в родительском представлении */
SET @NoRowsInParentDepartment		= '11111111-1111-1111-1111-111111111111';
SET @TotalID						= '00000000-0000-0000-0000-000000000000';

WITH [TasksAndDepts] ([UserID], [UserName], [DelayIndex], [Quant]) AS (
	SELECT
		[a].[UserID],
		[a].[UserName],
		CASE WHEN [a].[Completed] > [a].[Planned]
			THEN 1
			ELSE 0
		END,
		([qc].[QuantNumber] - [qp].[QuantNumber]) / 4
	FROM (
		SELECT
			[th].[UserID],
			[pr].[Name]			AS [UserName],
			[th].[Planned],
			[th].[TimeZoneUtcOffsetMinutes],
			[th].[Completed]
		FROM (
			#if(Administrator) {
			-- Админ видит всех сотрудников, входящих в роль "Все сотрудники", т.е. обычно всех, кроме System
			SELECT [rua].[UserID]
			FROM [RoleUsers] AS [rua] WITH (NOLOCK)
			WHERE [rua].[ID] = '7ff52dc0-ff6a-4c9d-ba25-b562c370004d'
			} {
			-- Не админ надо собирать права
			-- Для показа только заданий в своих подразделениях, если юзер - глава, или только своих. Работает только при наличии метароли - все сотрудники на все уровни вглубь
			SELECT [ru].[UserID]
			FROM [DepartmentRoles] AS [dr] WITH (NOLOCK)
			INNER JOIN [MetaRoles] AS [mr] WITH (NOLOCK)
				ON [mr].[IDGuid] = [dr].[ID]
			INNER JOIN [RoleUsers] AS [ru] WITH (NOLOCK)
				ON [ru].[ID] = [mr].[ID]
			WHERE [dr].[HeadUserID] = #param(CurrentUserID)

			UNION

			-- Добавляем сотрудников подразделений, для которых нет метаролей и текущий = руководитель
			SELECT [ru].[UserID]
			FROM [DepartmentRoles] AS [dr] WITH (NOLOCK)
			INNER JOIN [RoleUsers] AS [ru] WITH (NOLOCK)
				ON [ru].[ID] = [dr].[ID]
			WHERE [dr].[HeadUserID] = #param(CurrentUserID)
				AND NOT EXISTS (
					SELECT NULL
					FROM [MetaRoles] AS [mr] WITH (NOLOCK)
					WHERE [mr].[IDGuid] = [dr].[ID])

			UNION

			-- Может смотреть отчёт по своим заданиям
			SELECT #param(CurrentUserID)

			UNION

			-- Учёт карточек настройки прав на отчёт
			SELECT [rup].[UserID]
			FROM [ReportRolesActive] AS [rra] WITH (NOLOCK)
			INNER JOIN [RoleUsers] AS [rua] WITH (NOLOCK)
				ON [rua].[ID] = [rra].[RoleID]
			INNER JOIN [ReportRolesPassive] AS [rrp] WITH (NOLOCK)
				ON [rrp].[ID] = [rra].[ID]
			INNER JOIN [RoleUsers] AS [rup] WITH (NOLOCK)
				ON [rup].[ID] = [rrp].[RoleID]
			WHERE [rua].[UserID] = #param(CurrentUserID)
			}
		) [Users]
		INNER JOIN [TaskHistory] AS [th] WITH (NOLOCK)
			ON [Users].[UserID] = [th].[UserID]
				AND [th].[Completed] IS NOT NULL
				-- Исключаем из отчёта задания, завершённые вариантами: Отозвать, Запросить дополнительное согласование, Запросить комментарии,
				-- Вернуть документ на доработку, Начать новый цикл, Отменить регистрацию, Отозвать процесс, Отменить процесс, Отмена.
				AND [th].[OptionID] NOT IN ('6472fea9-f818-4ab5-9f31-9ccdaea9b412', 'c726d8ba-73b9-4867-87fe-387d4c61a75a', 'fffb3209-2b67-09f0-bd25-ba4ec94ca5e8',
											'174d3f96-c658-07b7-ba6a-d51a893390d8', 'c0b704b3-3ac5-4a0d-bcb6-1210e9cdb0b3', '66e0a7e1-484a-40a6-b123-06118ce3b160', 
											'd97d75a9-96ae-00ca-83ad-baa5c6aa811b', '6e244482-2e2f-46fd-8ec3-0de6daea2930', '2582b66f-375a-0d59-ae86-a149309c5785')
				#param(CompletionDate, [th].[Completed])
				#param(TaskType, [th].[TypeID])
				#param(SelUser, [th].[UserID])
				#param(Option, [th].[OptionID])
		INNER JOIN [PersonalRoles] AS [pr] WITH (NOLOCK)
			ON [pr].[ID] = [th].[UserID] -- решает задвоение результатов при переименовании пользователей
		#if(TypeParam) {
		INNER JOIN [DocumentCommonInfo] AS [i] WITH (NOLOCK)
			ON [i].[ID] = [th].[ID]
				AND COALESCE([i].[DocTypeID], [i].[CardTypeID]) = #param(TypeParam)
		}

		LEFT JOIN [RoleUsers] AS [rud] WITH (NOLOCK)
			ON [rud].[TypeID] = 2
			AND [rud].[UserID] = [th].[UserID]
		
		#if(Role) {
		INNER JOIN [RoleUsers] AS [fr] WITH (NOLOCK)
			ON [fr].[UserID] = [th].[UserID]
			#param(Role, [fr].[ID])
		}
		WHERE 
			1 = 1
			-- в случае отсутствия данных в родительской вьюхе, это условие не проверяется
			#if(Department && Department.ValueCount > 0) {
				#if(Department.Value == Guid.Parse("13769A42-E766-4407-8F9B-758820972EE5")) {
			AND [rud].[ID] IS NULL
				} {
			#param(Department, [rud].[ID])
				}
			} {
			AND [rud].[ID] = @NoRowsInParentDepartment
			}
		) AS [a]
	OUTER APPLY (
		SELECT TOP (1) [q].[QuantNumber]
		FROM [CalendarQuants] AS [q] WITH (NOLOCK)
		WHERE [q].[StartTime] <= DATEADD(minute, [a].[TimeZoneUtcOffsetMinutes], [a].[Planned])
		ORDER BY [q].[StartTime] DESC
		) AS [qp]
	OUTER APPLY (
		SELECT TOP (1) [q].[QuantNumber]
		FROM [CalendarQuants] AS [q] WITH (NOLOCK)
		WHERE [q].[StartTime] <= DATEADD(minute, [a].[TimeZoneUtcOffsetMinutes], [a].[Completed])
		ORDER BY [q].[StartTime] DESC
		) AS [qc]
	)
SELECT [t].*
FROM (
	SELECT
		[t].*,
		row_number() OVER (ORDER BY CASE WHEN [t].[UserName] IS NULL THEN 1 ELSE 0 END, #order_by) AS [rn]
	FROM (
		SELECT
			[t].[UserID],
			[t].[UserName],
			COALESCE(max(CASE WHEN [t].[Column] = 'id_0_cnt' THEN [t].[Value] END), 0)	AS [OnTime],
			COALESCE(max(CASE WHEN [t].[Column] = 'id_1_cnt' THEN [t].[Value] END), 0)	AS [Overdue],
			COALESCE(max(CASE WHEN [t].[Column] = 'id_1_avg' THEN [t].[Value] END), 0)	AS [OverdueAvgDelayPeriod],
			COALESCE(max(CASE WHEN [t].[Column] = 'id__cnt' THEN [t].[Value] END), 0)	AS [Total]
		FROM (
			SELECT
				COALESCE([b].[UserID], @TotalID) AS [UserID],
				[b].[UserName],
				[c].[Column],
				[c].[Value]
			FROM (
				SELECT
					[td].[UserID],
					[td].[UserName],
					[td].[DelayIndex],
					count(*) AS [cnt],
					avg([td].[Quant]) AS [AvgHDelay]
				FROM [TasksAndDepts] AS [td]
				GROUP BY GROUPING SETS (
					(),
					([td].[UserID], [td].[UserName]),
					([td].[UserID], [td].[UserName], [td].[DelayIndex]),
					([td].[DelayIndex]))
				) AS [b]
			CROSS APPLY (
				SELECT 'id_' + COALESCE(CAST([b].[DelayIndex] AS varchar), '') + '_cnt', [cnt]
				UNION ALL
				SELECT 'id_' + COALESCE(CAST([b].[DelayIndex] AS varchar), '') + '_avg', [AvgHDelay]
				) AS [c] ([Column], [Value])
			) AS [t]
			GROUP BY [t].[UserID], [t].[UserName]
		) AS [t]
	) AS [t]
#if(PageOffset) {
WHERE [t].[rn] >= #param(PageOffset) AND [t].[rn] < (#param(PageOffset) + #param(PageLimit))
}
ORDER BY [t].[rn];


[TEXTPART ReportPastTasksByUser PGSQL]
DECLARE
	"no_rows_in_parent_department"	uuid;
	"total_id"						uuid;
BEGIN
	/* Используется для предотвращение показа строк, если их нет в родительском представлении */
	"no_rows_in_parent_department"	= '11111111-1111-1111-1111-111111111111';
	"total_id"						= '00000000-0000-0000-0000-000000000000';

	RETURN QUERY
	WITH "ExcludedIDs" ("OptionID") AS
	(
		-- Исключаем из отчёта задания, завершённые вариантами: Отозвать, Запросить дополнительное согласование, Запросить комментарии,
		-- Вернуть документ на доработку, Начать новый цикл, Отменить регистрацию, Отозвать процесс, Отменить процесс, Отмена.
		SELECT * FROM ( VALUES
			('6472fea9-f818-4ab5-9f31-9ccdaea9b412'::uuid), ('c726d8ba-73b9-4867-87fe-387d4c61a75a'::uuid), ('fffb3209-2b67-09f0-bd25-ba4ec94ca5e8'::uuid),
			('174d3f96-c658-07b7-ba6a-d51a893390d8'::uuid), ('c0b704b3-3ac5-4a0d-bcb6-1210e9cdb0b3'::uuid), ('66e0a7e1-484a-40a6-b123-06118ce3b160'::uuid),
			('d97d75a9-96ae-00ca-83ad-baa5c6aa811b'::uuid), ('6e244482-2e2f-46fd-8ec3-0de6daea2930'::uuid), ('2582b66f-375a-0d59-ae86-a149309c5785'::uuid)
		) "OptionID"
	), "tasks_and_depts" ("UserID", "UserName", "DelayIndex", "Quant") AS (
		SELECT
			"a"."UserID",
			"a"."UserName",
			CASE WHEN "a"."Completed" > "a"."Planned"
				THEN 1
				ELSE 0
			END,
			("qc"."QuantNumber" - "qp"."QuantNumber") / 4
		FROM (
			SELECT
				"th"."UserID",
				"pr"."Name"		AS "UserName",
				"th"."Planned",
				"th"."TimeZoneUtcOffsetMinutes",
				"th"."Completed"
			FROM (
				#if(Administrator) {
				-- Админ видит всех сотрудников, входящих в роль "Все сотрудники", т.е. обычно всех, кроме System
				SELECT "rua"."UserID"
				FROM "RoleUsers" AS "rua"
				WHERE "rua"."ID" = '7ff52dc0-ff6a-4c9d-ba25-b562c370004d'
				} {
				-- Не админ надо собирать права
				-- Для показа только заданий в своих подразделениях, если юзер - глава, или только своих. Работает только при наличии метароли - все сотрудники на все уровни вглубь
				SELECT "ru"."UserID"
				FROM "DepartmentRoles" AS "dr"
				INNER JOIN "MetaRoles" AS "mr"
					ON "mr"."IDGuid" = "dr"."ID"
				INNER JOIN "RoleUsers" AS "ru"
					ON "ru"."ID" = "mr"."ID"
				WHERE "dr"."HeadUserID" = #param(CurrentUserID)

				UNION

				-- Добавляем сотрудников подразделений, для которых нет метаролей и текущий = руководитель
				SELECT "ru"."UserID"
				FROM "DepartmentRoles" AS "dr"
				INNER JOIN "RoleUsers" AS "ru"
					ON "ru"."ID" = "dr"."ID"
				WHERE "dr"."HeadUserID" = #param(CurrentUserID)
					AND NOT EXISTS (
						SELECT NULL
						FROM "MetaRoles" AS "mr"
						WHERE "mr"."IDGuid" = "dr"."ID")

				UNION

				-- Может смотреть отчёт по своим заданиям
				SELECT #param(CurrentUserID)

				UNION

				-- Учёт карточек настройки прав на отчёт
				SELECT "rup"."UserID"
				FROM "ReportRolesActive" AS "rra"
				INNER JOIN "RoleUsers" AS "rua"
					ON "rua"."ID" = "rra"."RoleID"
				INNER JOIN "ReportRolesPassive" AS "rrp"
					ON "rrp"."ID" = "rra"."ID"
				INNER JOIN "RoleUsers" AS "rup"
					ON "rup"."ID" = "rrp"."RoleID"
				WHERE "rua"."UserID" = #param(CurrentUserID)
				}
			) "Users"
			INNER JOIN "TaskHistory" AS "th"
				ON "Users"."UserID" = "th"."UserID"
					AND "th"."Completed" IS NOT NULL
					AND NOT EXISTS (
							SELECT NULL
							FROM "ExcludedIDs" "eid"
							WHERE "eid"."OptionID" = "th"."OptionID"
						)
					#param(CompletionDate, "th"."Completed")
					#param(TaskType, "th"."TypeID")
					#param(SelUser, "th"."UserID")
					#param(Option, "th"."OptionID")
			INNER JOIN "PersonalRoles" AS "pr"
				ON "pr"."ID" = "Users"."UserID" -- решает задвоение результатов при переименовании пользователей
			#if(TypeParam) {
			INNER JOIN "DocumentCommonInfo" AS "i"
				ON "i"."ID" = "th"."ID"
					AND COALESCE("i"."DocTypeID", "i"."CardTypeID") = #param(TypeParam)
			}
			
			LEFT JOIN "RoleUsers" AS "rud"
				ON "rud"."TypeID" = 2
					AND "rud"."UserID" = "Users"."UserID"
			
			#if(Role) {
			INNER JOIN "RoleUsers" AS "fr"
				ON "fr"."UserID" = "Users"."UserID"
				#param(Role, "fr"."ID")
			}
			WHERE true
				-- в случае отсутствия данных в родительской вьюхе, это условие не проверяется
				#if(Department && Department.ValueCount > 0) {
					#if(Department.Value == Guid.Parse("13769A42-E766-4407-8F9B-758820972EE5")) {
				AND "rud"."ID" IS NULL
					} {
				#param(Department, "rud"."ID")
					}
				} {
				AND "rud"."ID" = "no_rows_in_parent_department"
				}
			) AS "a"
		LEFT JOIN LATERAL (
			SELECT "q"."QuantNumber"
			FROM "CalendarQuants" AS "q"
			WHERE "q"."StartTime" <= "a"."Planned" + "a"."TimeZoneUtcOffsetMinutes" * interval '1 minute'
			ORDER BY "q"."StartTime" DESC
			LIMIT 1
			) AS "qp" ON true
		LEFT JOIN LATERAL (
			SELECT "q"."QuantNumber"
			FROM "CalendarQuants" AS "q"
			WHERE "q"."StartTime" <= "a"."Completed" + "a"."TimeZoneUtcOffsetMinutes" * interval '1 minute'
			ORDER BY "q"."StartTime" DESC
			LIMIT 1
			) AS "qc" ON true
		)
	SELECT "t".*
	FROM (
		SELECT
			"t".*,
			row_number() OVER (ORDER BY CASE WHEN "t"."UserName" IS NULL THEN 1 ELSE 0 END, #order_by) AS "rn"
		FROM (
			SELECT
				"t"."UserID",
				"t"."UserName",
				COALESCE(max(CASE WHEN "t"."Column" = 'id_0_cnt' THEN "t"."Value" END), 0)		AS "OnTime",
				COALESCE(max(CASE WHEN "t"."Column" = 'id_1_cnt' THEN "t"."Value" END), 0)		AS "Overdue",
				COALESCE(max(CASE WHEN "t"."Column" = 'id_1_avg' THEN "t"."Value" END), 0)		AS "OverdueAvgDelayPeriod",
				COALESCE(max(CASE WHEN "t"."Column" = 'id__cnt' THEN "t"."Value" END), 0)		AS "Total"
			FROM (
				SELECT
					COALESCE("b"."UserID", "total_id") AS "UserID",
					"b"."UserName",
					"c"."Column",
					"c"."Value"
				FROM (
					SELECT
						"td"."UserID",
						"td"."UserName",
						"td"."DelayIndex",
						count(*) AS "cnt",
						avg("td"."Quant") AS "AvgHDelay"
					FROM "tasks_and_depts" AS "td"
					GROUP BY GROUPING SETS (
						(),
						("td"."UserID", "td"."UserName"),
						("td"."UserID", "td"."UserName", "td"."DelayIndex"),
						("td"."DelayIndex"))
					) AS "b"
				CROSS JOIN LATERAL (
					SELECT 'id_' || COALESCE(CAST("b"."DelayIndex" AS varchar), '') || '_cnt', "cnt"
					UNION ALL
					SELECT 'id_' || COALESCE(CAST("b"."DelayIndex" AS varchar), '') || '_avg', "AvgHDelay"::bigint
					) AS "c" ("Column", "Value")
				) AS "t"
			GROUP BY "t"."UserID", "t"."UserName"
			) AS "t"
		) AS "t"
	#if(PageOffset) {
	WHERE "t"."rn" >= #param(PageOffset) AND "t"."rn" < (#param(PageOffset) + #param(PageLimit))
	}
	ORDER BY "t"."rn";
END;