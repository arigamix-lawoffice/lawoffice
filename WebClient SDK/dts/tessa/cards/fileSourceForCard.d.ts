import { Card } from './card';
import { CardTypeSealed } from './types/cardType';
import { CardFileType } from './cardFileType';
import { CardMetadataSealed } from './metadata';
import { CardGetFileContentRequest } from './service';
import { CardFileContentSource } from './cardFileContentSource';
import { FileSignatureLoadingMode, FileSource, IFile, IFileCreationToken, IFilePermissions, IFileSignature, IFileVersion } from 'tessa/files';
import { IStorage } from 'tessa/platform/storage';
import { IUserSession } from 'common/utility/userSession';
import { IUIContext } from 'tessa/ui';
import { Result, ResultWithInfo } from 'tessa/platform/result';
export declare class FileSourceForCard extends FileSource {
    constructor(card: Card, cardType: CardTypeSealed, cardMetadata: CardMetadataSealed, session: IUserSession, executeInContextFunc?: ((action: (context: IUIContext) => void) => void) | null);
    protected _card: Card;
    protected _cardType: CardTypeSealed;
    protected _cardMetadata: CardMetadataSealed;
    protected _defaultType: CardFileType;
    protected _typesById: Map<guid, CardFileType>;
    protected getFileCreationTokenCore(): IFileCreationToken;
    protected getFilesCore(): Promise<Result<IFile[]>>;
    protected getVersionsCore(file: IFile): Promise<Result<IFileVersion[]>>;
    protected getSignaturesCore(version: IFileVersion, loadingMode: FileSignatureLoadingMode): Promise<Result<IFileSignature[]>>;
    protected getContentCore(fileOrFileVersion: IFile | IFileVersion, info?: IStorage): Promise<ResultWithInfo<File>>;
    protected saveContentCore(fileOrFileVersion: IFile | IFileVersion, info?: IStorage): Promise<Result<boolean>>;
    protected getOrSaveContentRequest(fileOrFileVersion: IFile | IFileVersion, info?: IStorage): CardGetFileContentRequest;
    setExternalContentCore(file: IFile, externalFileVersion: IFileVersion | null): boolean;
    setExternalContentCore(file: IFile, fileSource: CardFileContentSource | null): boolean;
    getLink(file: IFile, info?: IStorage, withVersion?: boolean): string;
    getLink(fileVersion: IFileVersion, info?: IStorage): string;
    getLinkData(file: IFile, info?: IStorage): IStorage | null;
    getLinkData(fileVersion: IFileVersion, info?: IStorage): IStorage | null;
    getNewFilePermissions(): IFilePermissions;
    private getDefaultType;
    private getCardFileType;
    private setFileToken;
    private static setVersionToken;
    private static setSignatureToken;
    private static getVersionStateFromCard;
    private static getVersionStateToCard;
    private initRequest;
    private createNewFileCard;
    private getCardFile;
    private static getContentSource;
    private tryGetCardFileSignature;
    notifyAdded(file: IFile, isVirtual: boolean): Promise<void>;
    notifyRemoved(file: IFile): void;
    notifyReverted(file: IFile): void;
    notifyCategoryModified(file: IFile): void;
    notifyNameModified(file: IFile): void;
    notifyContentModified(file: IFile): void;
    notifyContentReplaced(file: IFile): void;
    notifyOriginModified(file: IFile): void;
    notifyOptionsModified(file: IFile): void;
    notifyNewVersionTagsModified(file: IFile): void;
    notifySignAdded(signature: IFileSignature): void;
    notifySignRemoved(signature: IFileSignature): void;
    notifySignModified(_signature: IFileSignature): void;
}
