import { IAtom } from 'mobx';
import { IStorage } from './storage';
import { IStorageCachePolicyProvider } from './storageCachePolicyProvider';
import { IStorageMapProvider } from './storageMapProvider';
import { IStorageNotificationReciever } from './storageNotificationReciever';
import { IKeyedStorageValueFactory } from './storageValueFactory';
import { ICloneable } from 'tessa/platform/cloneable';
import { ValidationObject } from 'tessa/platform/validation/validationObject';
export declare class MapStorage<T = any> extends ValidationObject implements Map<string, T>, IStorageMapProvider, IStorageCachePolicyProvider, ICloneable<MapStorage<T>>, IStorageNotificationReciever {
    constructor(storage: IStorage, defaultValueFactory?: IKeyedStorageValueFactory<string, T> | null, atomDisabled?: boolean);
    protected _storage: IStorage;
    protected _atom: IAtom;
    protected _atomDisabled: boolean;
    protected _cachedMembers: Map<string, T>;
    protected _defaultValueFactory: IKeyedStorageValueFactory<string, T>;
    get defaultValueFactory(): IKeyedStorageValueFactory<string, T> | undefined;
    get isTypedStorage(): boolean;
    protected getItem(storage: any, key: string, skipSettingToCache?: boolean): T;
    protected getItemStorage(item: any): any;
    protected reportObserved(): void;
    protected reportChanged(): void;
    add(key: string): T;
    add(key: string, item: T): T;
    remove(key: string): boolean;
    tryGet(key: string): T | undefined;
    getOrAdd(key: string): T;
    readonly [Symbol.toStringTag]: 'Map';
    clear(): void;
    delete(key: string): boolean;
    forEach(callbackfn: (value: T, key: string, map: Map<string, T>) => void, thisArg?: any): void;
    get(key: string): T | undefined;
    has(key: string): boolean;
    set(key: string, value: T): this;
    get size(): number;
    [Symbol.iterator](): IterableIterator<[string, T]>;
    entries(): IterableIterator<[string, T]>;
    keys(): IterableIterator<string>;
    values(): IterableIterator<T>;
    getStorage(): IStorage<T>;
    ensureCacheResolved(): void;
    clone(): MapStorage<T>;
    notifyStorageUpdated(): void;
}
