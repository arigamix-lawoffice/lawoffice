import { IDataSourceMetadata, DataSourceMetadataSealed } from './dataSourceMetadata';
import { IViewMetadata, IViewAppearanceMetadata, IViewColumnMetadata, IViewParameterMetadata, RequestParameter, IViewReferenceMetadata, ViewSelectionMode, IViewSubsetMetadata, ViewMetadataSealed } from './metadata';
import { MetadataDataSourceTypes } from './metadataDataSourceTypes';
import { SortDirection, SortingColumn } from './sortingColumn';
import { IExtensionMetadata } from './workplaces/extensionMetadata';
import { Paging } from './paging';
export declare class ViewMetadataAdapter implements IDataSourceMetadata {
    constructor();
    private _metadata;
    readonly alias: string;
    readonly appearance: string | null;
    readonly appearances: Array<IViewAppearanceMetadata>;
    readonly caption: string;
    readonly columns: Array<IViewColumnMetadata>;
    readonly defaultSortColumn: string;
    readonly defaultSortDirection: SortDirection;
    readonly defaultSortingColumns: Array<SortingColumn>;
    readonly enableAutoWidth: boolean;
    get expandingIconName(): string;
    readonly exportDataPageLimit: number;
    readonly extensions: Array<IExtensionMetadata>;
    get iconName(): string;
    readonly id: string;
    readonly multiSelect: boolean;
    readonly pageLimit: number;
    readonly paging: Paging;
    readonly parameters: Array<IViewParameterMetadata>;
    readonly parametersValues: Array<RequestParameter>;
    readonly references: Array<IViewReferenceMetadata>;
    readonly rowCounterVisible: boolean;
    readonly rowCountSubset: string;
    readonly selectionMode: ViewSelectionMode;
    get sourceType(): MetadataDataSourceTypes;
    readonly subsets: Array<IViewSubsetMetadata>;
    getViewMetadata(): IViewMetadata;
    isSpecialSubset(alias: string): boolean;
    seal<T = DataSourceMetadataSealed>(): T;
    static createWithParam(viewMetadata: ViewMetadataSealed): ViewMetadataAdapter;
}
