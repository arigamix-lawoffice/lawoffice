import { FilterDialogViewModel } from '../uiHost/filterDialog/filterDialogViewModel';
import { IReactionDisposer } from 'mobx';
import { ISelectionState } from './selectionState';
import type { IViewParameters, IParametersSetNameProvider } from './parameters';
import type { IViewSorting } from './viewSorting';
import type { DoubleClickAction } from './doubleClickInfo';
import { IParametersMappingContext } from '../cards/controls';
import { SortingColumn } from 'tessa/views';
import { Paging } from 'tessa/views';
import type { SchemeDbType } from 'tessa/platform';
import { EventHandler } from 'tessa/platform';
import { ViewMetadataSealed, ViewSelectionMode, RequestParameter } from 'tessa/views/metadata';
import { IGridRowTagViewModel } from 'components/cardElements/grid/interfaces';
export interface IViewComponentBase extends IParametersSetNameProvider {
    readonly viewMetadata: ViewMetadataSealed | null;
    readonly columns: ReadonlyMap<string, SchemeDbType>;
    readonly data: ReadonlyArray<ReadonlyMap<string, any>> | null;
    readonly tags: Map<guid, IGridRowTagViewModel[]>;
    readonly isDataLoading: boolean;
    readonly parameters: IViewParameters;
    readonly sorting: IViewSorting;
    readonly sortingColumns: ReadonlyArray<SortingColumn>;
    readonly selectionState: ISelectionState;
    currentPage: number;
    optionalPagingStatus: boolean;
    pageCount: number;
    pageCountStatus: boolean;
    calculatedRowCount: number;
    readonly actualRowCount: number;
    readonly hasNextPage: boolean;
    readonly hasPreviousPage: boolean;
    pageLimit: number;
    pagingMode: Paging;
    readonly selectedCellValue: any | null;
    readonly selectedColumn: string | null;
    readonly selectedRow: ReadonlyMap<string, any> | null;
    readonly selectedRows: ReadonlyArray<ReadonlyMap<string, any>> | null;
    readonly refSection: ReadonlyArray<string> | null;
    readonly selectionMode: ViewSelectionMode;
    readonly multiSelect: boolean;
    multiSelectEnabled: boolean;
    quickSearchEnabled: boolean;
    firstRowSelection: boolean;
    doubleClickAction: DoubleClickAction;
    selectRowOnContextMenu: boolean;
    readonly onRefreshing: EventHandler<() => void>;
    readonly onRefreshed: EventHandler<() => void>;
    refresh(): Promise<void>;
    canRefresh(): boolean;
    filter(params?: {
        focusValue?: {
            requestParam: RequestParameter;
            criteriaIndex: number;
        };
    }): Promise<void>;
    canFilter(): boolean;
    sortColumn(column: string, addOrInverse: boolean, descendingByDefault: boolean): any;
    getParametersMappingContext(): IParametersMappingContext;
    onFilterDialogInitialzied?: (vm: FilterDialogViewModel) => Promise<void>;
}
export declare abstract class ViewComponentBase<T extends IViewComponentBase> implements IViewComponentBase {
    constructor();
    protected _viewMetadata: ViewMetadataSealed | null;
    protected _masterView: T | null;
    protected _columns: ReadonlyMap<string, SchemeDbType>;
    protected _data: ReadonlyArray<ReadonlyMap<string, any>> | null;
    protected _isDataLoading: boolean;
    protected _parameters: IViewParameters;
    protected _sorting: IViewSorting;
    protected _selection: ISelectionState;
    protected _currentPage: number;
    protected _optionalPagingStatus: boolean;
    protected _pageCount: number;
    protected _pageCountStatus: boolean;
    protected _calculatedRowCount: number;
    protected _hasNextPage: boolean;
    protected _pageLimit: number;
    protected _pagingMode: Paging;
    protected _refSection: ReadonlyArray<string> | null;
    protected _selectionMode: ViewSelectionMode;
    protected _multiSelect: boolean;
    protected _multiSelectEnabled: boolean;
    protected _quickSearchEnabled: boolean;
    protected _selectionReaction: IReactionDisposer | null;
    protected _parameterReaction: IReactionDisposer | null;
    protected _tags: Map<guid, IGridRowTagViewModel[]>;
    get viewMetadata(): ViewMetadataSealed | null;
    set viewMetadata(value: ViewMetadataSealed | null);
    get masterView(): T | null;
    set masterView(value: T | null);
    get columns(): ReadonlyMap<string, SchemeDbType>;
    get tags(): Map<guid, IGridRowTagViewModel[]>;
    get data(): ReadonlyArray<ReadonlyMap<string, any>> | null;
    get isDataLoading(): boolean;
    set isDataLoading(value: boolean);
    get parameters(): IViewParameters;
    set parameters(value: IViewParameters);
    get parametersSetName(): string;
    get sorting(): IViewSorting;
    set sorting(value: IViewSorting);
    get sortingColumns(): ReadonlyArray<SortingColumn>;
    get selectionState(): ISelectionState;
    get currentPage(): number;
    set currentPage(value: number);
    get optionalPagingStatus(): boolean;
    set optionalPagingStatus(value: boolean);
    get pageCount(): number;
    set pageCount(value: number);
    get pageCountStatus(): boolean;
    set pageCountStatus(value: boolean);
    get calculatedRowCount(): number;
    set calculatedRowCount(value: number);
    get actualRowCount(): number;
    get hasNextPage(): boolean;
    get hasPreviousPage(): boolean;
    get pageLimit(): number;
    set pageLimit(value: number);
    get pagingMode(): Paging;
    set pagingMode(value: Paging);
    get selectedCellValue(): any | null;
    get selectedColumn(): string | null;
    get selectedRow(): ReadonlyMap<string, any> | null;
    get selectedRows(): ReadonlyArray<ReadonlyMap<string, any>> | null;
    get refSection(): ReadonlyArray<string> | null;
    set refSection(value: ReadonlyArray<string> | null);
    get selectionMode(): ViewSelectionMode;
    set selectionMode(value: ViewSelectionMode);
    get multiSelect(): boolean;
    set multiSelect(value: boolean);
    get multiSelectEnabled(): boolean;
    set multiSelectEnabled(value: boolean);
    get quickSearchEnabled(): boolean;
    set quickSearchEnabled(value: boolean);
    firstRowSelection: boolean;
    doubleClickAction: DoubleClickAction;
    onFilterDialogInitialzied?: (vm: FilterDialogViewModel) => Promise<void>;
    selectRowOnContextMenu: boolean;
    readonly onRefreshing: EventHandler<() => void>;
    readonly onRefreshed: EventHandler<() => void>;
    initialize(): void;
    dispose(): void;
    protected initializeFields(): void;
    protected initializeColumns(): void;
    protected initializeSelection(): void;
    protected initializeParameters(): void;
    protected initializeSorting(): void;
    protected initializePaging(): void;
    protected initializeContent(): void;
    protected initializeMasterSelectionReaction(): void;
    protected initializeParameterReaction(): void;
    protected updateParameters(): void;
    protected updatePageCount(): void;
    protected updatePageCountVisibility(): void;
    protected updateQuickSearchAvailability(): void;
    protected getCurrentState(): ViewComponentBaseState;
    protected restoreState(state: ViewComponentBaseState): void;
    refresh(): Promise<void>;
    setPageAndRefresh(page: number): Promise<void>;
    canRefresh(): boolean;
    filter(params?: {
        focusValue?: {
            requestParam: RequestParameter;
            criteriaIndex: number;
        };
    }): Promise<void>;
    canFilter(): boolean;
    sortColumn(column: string, addOrInverse: boolean, descendingByDefault: boolean): void;
    protected cancelLoad(state: ViewComponentBaseState): void;
    protected loadAndCancel(state: ViewComponentBaseState, cancelIfEmpty?: boolean): Promise<void>;
    protected load(cancelIfEmpty?: boolean): Promise<boolean>;
    protected resetData(): void;
    protected updateData(columns: ReadonlyMap<string, SchemeDbType>, rows: ReadonlyArray<ReadonlyMap<string, any>>, rowCount: number, tags: Map<guid, IGridRowTagViewModel[]>, selectionState?: ISelectionState | null): void;
    protected tryGetFirstVisibleColumnName(resultColumns: ReadonlyMap<string, SchemeDbType>): string;
    protected getViewData(): Promise<{
        columns: ReadonlyMap<string, SchemeDbType>;
        rows: ReadonlyArray<ReadonlyMap<string, any>>;
        rowCount: number;
        tags: Map<guid, IGridRowTagViewModel[]>;
    } | null>;
    getParametersMappingContext(): IParametersMappingContext;
}
export declare class ViewComponentBaseState {
    columns: ReadonlyMap<string, SchemeDbType> | null;
    data: ReadonlyArray<ReadonlyMap<string, any>> | null;
    selection: ISelectionState;
    parametersSetName: string;
    calculatedRowCount: number;
    currentPage: number;
    constructor(columns: ReadonlyMap<string, SchemeDbType> | null, data: ReadonlyArray<ReadonlyMap<string, any>> | null, selection: ISelectionState, parametersSetName: string, calculatedRowCount: number, currentPage: number);
}
