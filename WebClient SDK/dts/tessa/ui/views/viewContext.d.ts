import { IViewParameters } from './parameters';
import { IWorkplaceViewModel } from './workplaceViewModel';
import { SchemeDbType } from 'tessa/platform/schemeDbType';
import { ViewSelectionMode } from 'tessa/views/metadata/viewSelectionMode';
import { ITessaView, SortingColumn } from 'tessa/views';
export interface IViewContext {
    readonly children: ReadonlyArray<IViewContext>;
    readonly columns: ReadonlyMap<string, SchemeDbType>;
    readonly data: ReadonlyArray<ReadonlyMap<string, any>> | null;
    readonly id: guid;
    readonly multiSelect: boolean;
    readonly parameters: IViewParameters;
    readonly parentContext: IViewContext | null;
    readonly refSection: ReadonlyArray<string> | null;
    readonly selectedCellValue: any | null;
    readonly selectedColumn: string | null;
    readonly selectedRow: ReadonlyMap<string, any> | null;
    readonly selectedRows: ReadonlyArray<ReadonlyMap<string, any>> | null;
    readonly selectionMode: ViewSelectionMode;
    readonly view: ITessaView | null;
    readonly workplace: IWorkplaceViewModel;
    refreshView(): Promise<void>;
    canRefreshView(): boolean;
    filterView(): Promise<void>;
    canFilterView(): boolean;
    clearFilterView(): any;
    canClearFilterView(): boolean;
    getSortedColumns(): ReadonlyArray<SortingColumn>;
    sortColumn(column: string, addOrInverse: boolean, descendingByDefault: boolean): any;
    getTableVisibleColumnOrdering(): ReadonlyArray<string>;
    inCellSelectionMode(): boolean;
    inSelectionMode(): boolean;
}
export declare function isViewContext(context: any): boolean;
export declare class NullViewContext implements IViewContext {
    constructor(workplace: IWorkplaceViewModel);
    readonly children: ReadonlyArray<IViewContext>;
    readonly columns: ReadonlyMap<string, SchemeDbType>;
    readonly data: ReadonlyArray<ReadonlyMap<string, any>> | null;
    readonly id: guid;
    readonly multiSelect: boolean;
    readonly parameters: IViewParameters;
    readonly parentContext: IViewContext | null;
    readonly refSection: string[] | null;
    readonly selectedCellValue: any | null;
    readonly selectedColumn: string | null;
    readonly selectedRow: ReadonlyMap<string, any> | null;
    readonly selectedRows: ReadonlyArray<ReadonlyMap<string, any>> | null;
    readonly selectionMode: ViewSelectionMode;
    readonly view: ITessaView | null;
    readonly workplace: IWorkplaceViewModel;
    refreshView(): Promise<void>;
    canRefreshView(): boolean;
    filterView(): Promise<void>;
    canFilterView(): boolean;
    clearFilterView(): void;
    canClearFilterView(): boolean;
    getSortedColumns(): ReadonlyArray<SortingColumn>;
    sortColumn(_column: string, _addOrInverse: boolean, _descendingByDefault: boolean): void;
    getTableVisibleColumnOrdering(): ReadonlyArray<string>;
    inCellSelectionMode(): boolean;
    inSelectionMode(): boolean;
}
