import { ITreeItemWithMetadata, ITreeItem } from './workplaces/tree';
import { TreeItemWithMetadataBase } from 'tessa/ui/views/workplaces/tree';
import { WorkplaceCreationContext } from './workplaceCreationContext';
import { DoubleClickAction } from './doubleClickInfo';
import { IViewContext } from './viewContext';
import { IContentProvider } from './contentProvider';
import { IUIContext } from '../uiContext';
import { RequestParameter } from 'tessa/views/metadata/requestParameter';
import { WorkplaceMetadataSealed } from 'tessa/views/workplaces/workplaceMetadata';
import { Visibility, EventHandler } from 'tessa/platform';
import { ShowMode } from 'tessa/views/showMode';
export interface WorkplaceViewModelArgs {
    workplace: IWorkplaceViewModel;
    force?: boolean;
}
export interface IWorkplaceViewModel extends ITreeItemWithMetadata<WorkplaceMetadataSealed> {
    readonly content: IContentProvider | null;
    readonly context: IUIContext;
    readonly currentItem: ITreeItem | null;
    readonly doubleClickAction: DoubleClickAction | null;
    emptyFoldersVisible: boolean;
    enabledUserModification: boolean;
    readonly extraParameters: RequestParameter[];
    isActive: boolean;
    isCloseable: boolean;
    treeWidth: number;
    readonly refSection: ReadonlyArray<string> | null;
    treeVisibility: Visibility;
    readonly viewContext: IViewContext;
    showMode: ShowMode;
    changeURLWithItem: (workplace: IWorkplaceViewModel, needDispatch: boolean) => void;
    treeIsOpen: boolean;
    readonly activated: EventHandler<(args: WorkplaceViewModelArgs) => void>;
    readonly closed: EventHandler<(args: WorkplaceViewModelArgs) => void>;
    readonly deactivated: EventHandler<(args: WorkplaceViewModelArgs) => void>;
    getOrCreateContent(treeItem: ITreeItem): IContentProvider | null;
    changeCurrentItem(treeItem: ITreeItem | null, needDispatch?: boolean): any;
    openItemById(compositionId?: guid | null, openFindFirstVisibleItem?: boolean, needDispatch?: boolean): Promise<void>;
}
export declare class WorkplaceViewModel extends TreeItemWithMetadataBase<WorkplaceMetadataSealed> implements IWorkplaceViewModel {
    constructor(creationContext: WorkplaceCreationContext);
    private _nullContext;
    private _creationContext;
    private _content;
    private _contentCache;
    private _currentItem;
    private _isActive;
    private _treeWidth;
    private _treeVisible;
    private _contentStrategy;
    private _treeIsOpen;
    private _emptyFoldersVisible;
    private _enabledEndUserModification;
    get content(): IContentProvider | null;
    readonly context: IUIContext;
    get currentItem(): ITreeItem | null;
    get doubleClickAction(): DoubleClickAction | null;
    get emptyFoldersVisible(): boolean;
    set emptyFoldersVisible(value: boolean);
    get enabledUserModification(): boolean;
    set enabledUserModification(value: boolean);
    get extraParameters(): RequestParameter[];
    get isActive(): boolean;
    set isActive(value: boolean);
    get isCloseable(): boolean;
    set isCloseable(value: boolean);
    get treeWidth(): number;
    set treeWidth(value: number);
    get refSection(): ReadonlyArray<string> | null;
    get treeVisibility(): Visibility;
    set treeVisibility(value: Visibility);
    get viewContext(): IViewContext;
    get showMode(): ShowMode;
    changeURLWithItem: (workplace: IWorkplaceViewModel, needDispatch: boolean) => void;
    get treeIsOpen(): boolean;
    set treeIsOpen(value: boolean);
    readonly activated: EventHandler<(args: WorkplaceViewModelArgs) => void>;
    readonly closed: EventHandler<(args: WorkplaceViewModelArgs) => void>;
    readonly deactivated: EventHandler<(args: WorkplaceViewModelArgs) => void>;
    dispose(): void;
    getOrCreateContent(treeItem: ITreeItem): IContentProvider | null;
    changeCurrentItem(treeItem: ITreeItem | null, needDispatch?: boolean): void;
    private changeContent;
    openItemById(compositionId?: guid | null, openFindFirstVisibleItem?: boolean, needDispatch?: boolean): Promise<void>;
}
