import { ITreeItem } from './treeItem';
import { ITreeItemVisitor, ITreeItemAsyncVisitor } from './treeItemVisitor';
import { ITreeItemAsyncLoader } from './treeItemAsyncLoader';
import { ITreeItemUpdateContext } from './treeItemUpdateContext';
import { MenuAction } from 'tessa/ui/menuAction';
import { ITreeItemMenuContext } from './treeItemMenuContext';
import { IWorkplaceViewModel } from '../../workplaceViewModel';
import { TreeItemContentFactory } from '../contentProviderCreationStrategy';
import { IExtensionMetadata } from 'tessa/views/workplaces';
import { Visibility, EventHandler } from 'tessa/platform';
import { IUIContext } from 'tessa/ui/uiContext';
import { IExtensionExecutor } from 'tessa/extensions';
export declare abstract class TreeItemBase implements ITreeItem {
    constructor();
    protected _treeLoader: ITreeItemAsyncLoader;
    protected _items: Array<ITreeItem>;
    protected _icon: string;
    protected _expandedIcon: string;
    protected _isExpanded: boolean;
    protected _parent: ITreeItem | null;
    protected _switchExpandOnSingleClick: boolean;
    protected _text: string;
    protected _visibility: Visibility;
    protected _isLoading: boolean;
    protected _lastUpdateTime: number;
    protected _deferredLoadChildCallback: (() => void) | null;
    protected _extensionExecutor: IExtensionExecutor | null;
    readonly uiId: guid;
    compositionId: guid;
    contentProviderFactory: TreeItemContentFactory | null;
    readonly contextMenuGenerators: ((ctx: ITreeItemMenuContext) => void)[];
    get extensions(): ReadonlyArray<IExtensionMetadata>;
    get icon(): string;
    set icon(value: string);
    get expandedIcon(): string;
    set expandedIcon(value: string);
    get isExpanded(): boolean;
    set isExpanded(value: boolean);
    get isSelected(): boolean;
    get items(): ReadonlyArray<ITreeItem>;
    get visibleItems(): ReadonlyArray<ITreeItem>;
    get hasItems(): boolean;
    ownerId: guid;
    get parent(): ITreeItem | null;
    set parent(value: ITreeItem | null);
    get switchExpandOnSingleClick(): boolean;
    set switchExpandOnSingleClick(value: boolean);
    get text(): string;
    set text(value: string);
    readonly uiContextExecutor: (action: (context: IUIContext) => void) => void;
    get visibility(): Visibility;
    set visibility(value: Visibility);
    get isLoading(): boolean;
    workplace: IWorkplaceViewModel;
    get lastUpdateTime(): number;
    isBypassCache: boolean;
    readonly expanded: EventHandler<(args: {
        item: ITreeItem;
    }) => void>;
    get extensionExecutor(): IExtensionExecutor | null;
    addItem(item: ITreeItem): boolean;
    addItems(items: ITreeItem[]): void;
    insertItem(index: number, item: ITreeItem): boolean;
    getContextMenu(): ReadonlyArray<MenuAction>;
    private executeInViewContext;
    initialize(): void;
    dispose(): void;
    removeItem(treeItem: ITreeItem, withDispose?: boolean): boolean;
    removeItems(removingPolicy: (t: ITreeItem) => boolean, withDispose?: boolean): void;
    removeItems(items: ITreeItem[], withDispose?: boolean): void;
    tryGetItemById(compositionId: guid): ITreeItem | null;
    hasItem(item: ITreeItem): boolean;
    visit(visitor: ITreeItemVisitor): boolean;
    visitAsync(visitor: ITreeItemAsyncVisitor): Promise<boolean>;
    protected beforeParentChanged(_parent: ITreeItem | null, _newParent: ITreeItem | null): void;
    protected afterParentChanged(_oldParent: ITreeItem | null, _parent: ITreeItem | null): void;
    protected getExtensions(): ReadonlyArray<IExtensionMetadata>;
    protected loadChild(force?: boolean): Promise<void>;
    protected loadChildInternal(force?: boolean): Promise<void>;
    canRefreshNode(): boolean;
    refreshNode(context?: ITreeItemUpdateContext | null): Promise<void>;
    expand(): Promise<void>;
    hasSelection(): boolean;
    setExtensionExecutor(extensionExecutor: IExtensionExecutor): void;
}
