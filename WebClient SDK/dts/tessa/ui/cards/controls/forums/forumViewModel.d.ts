import { TopicEditorViewModel } from './topicEditorViewModel';
import { TopicListViewModel } from './topicListViewModel';
import { TopicViewModel } from './topicViewModel';
import { ForumPermissionsProvider } from './forumPermissionsProvider';
import { EmptyForumViewModel } from './emptyForumViewModel';
import { ControlViewModelBase } from '../controlViewModelBase';
import { ICardModel, IControlState } from '../../interfaces';
import { ForumResponse, ForumSettingsModel, MessageModel, ParticipantModel, TopicModel } from 'tessa/forums';
import { ArrayStorage, IStorage } from 'tessa/platform/storage';
import { IValidationResultBuilder, ValidationResult } from 'tessa/platform/validation';
import { CardTypeControl } from 'tessa/cards/types';
import { EventHandler } from 'tessa/platform';
import { SearchModel } from 'tessa/forums/searchModel';
import { UIButton } from 'tessa/ui/uiButton';
import { MenuAction } from 'tessa/ui/menuAction';
import { ForumActionParameters } from './forumCommon';
import { TabSelectedContext } from '../../tabSelectedEventArgs';
import { IFileControlManager } from 'tessa/ui/files';
import { UriLinkEventArgs } from 'tessa/ui/uriLinks';
export interface ContentChangedEventArgs {
    forum: ForumViewModel;
    content: ForumViewModelContentType | null;
}
export declare type ForumViewModelContentType = EmptyForumViewModel | TopicEditorViewModel | TopicListViewModel;
export declare class ForumViewModel extends ControlViewModelBase {
    constructor(control: CardTypeControl, model: ICardModel);
    private readonly _model;
    private _content;
    private _stubMessage;
    private readonly _isLicenseValid;
    private _contentWidthRatio;
    private _isSuperModeratorModeEnabled;
    private _isAddTopicEnabled;
    private _isEnabledForumEmptyContextMenu;
    private _satelliteId;
    private _krToken;
    readonly permissionsProvider: ForumPermissionsProvider;
    private _topicTypeId;
    private readonly _forumMaxAttachedFileSizeKb;
    private readonly _forumMaxAttachedFiles;
    private readonly _forumMaxMessageInlines;
    private readonly _forumMaxMessageSize;
    private _isExpanded;
    private _stretchVertically;
    private readonly _minHeight;
    private readonly _maxHeight;
    private _topicSearchModel;
    private _editorHeight;
    private _singletonMode;
    private _reverseOrder;
    private _isLoaded;
    previewManager: IFileControlManager;
    private _spellcheck;
    private _uriLinkDependencies;
    get cardModel(): ICardModel;
    get content(): ForumViewModelContentType | null;
    get stubMessage(): string | null;
    set stubMessage(value: string | null);
    get isLicenseValid(): boolean;
    get contentWidthRatio(): number;
    set contentWidthRatio(value: number);
    get isSuperModeratorModeEnabled(): boolean;
    set isSuperModeratorModeEnabled(value: boolean);
    get isAddTopicEnabled(): boolean;
    set isAddTopicEnabled(value: boolean);
    get isEnabledForumEmptyContextMenu(): boolean;
    set isEnabledForumEmptyContextMenu(value: boolean);
    get topicTypeId(): guid;
    set topicTypeId(value: guid);
    get isExpanded(): boolean;
    get stretchVertically(): boolean;
    set stretchVertically(value: boolean);
    get minHeight(): string | undefined;
    get maxHeight(): string | undefined;
    get topicSearchModel(): SearchModel;
    set topicSearchModel(value: SearchModel);
    get editorHeight(): number;
    set editorHeight(value: number);
    get singletonMode(): boolean;
    set singletonMode(value: boolean);
    get reverseOrder(): boolean;
    set reverseOrder(value: boolean);
    get forumMaxAttachedFileSizeKb(): number | null;
    get forumMaxAttachedFiles(): number | null;
    get forumMaxMessageInlines(): number | null;
    get forumMaxMessageSize(): number | null;
    get spellcheck(): boolean;
    set spellcheck(value: boolean);
    archiveTopicAction: (topicID: string, isArchiving: boolean) => Promise<void>;
    checkAddTopicPermissionAction: () => Promise<void>;
    checkSuperModeratorPermissionAction: () => Promise<void>;
    getIsExpandedAction: () => boolean;
    modifyAddingTopicAction: (model: TopicModel) => void;
    modifyTopicsAction?: (topics: TopicModel[]) => Promise<ArrayStorage<TopicModel>>;
    modifyOpenParticipantsAction?: (params: ForumActionParameters) => void;
    modifyTopicControlContextMenuAction?: (menu: UIButton[]) => void;
    modifyTopicControlAttachmentContextMenuAction?: (menu: MenuAction[]) => void;
    modifyForumEmptyControlContextMenuAction?: (menu: MenuAction[]) => void;
    modifyTopicListDefaultContextMenu?: (menu: UIButton[]) => void;
    modifyMessageContextMenu?: (menu: UIButton[]) => void;
    modifyMessageServiceContextMenu?: (menu: UIButton[]) => void;
    modifyFoundMessageContextMenu?: (menu: UIButton[]) => void;
    onExpandAction: (alwaysExpanded?: boolean) => void;
    openParticipantsAction: (params: ForumActionParameters, modifyOpenParticipants?: (params: ForumActionParameters) => void) => Promise<void>;
    openTopicWithCurrentMessageAction: (topicId: string, topicTypeId: string, messageId: string, messageCreated: string, isNeedUpdateLastReadMessageTime?: boolean) => Promise<void>;
    saveForumSettingsAction: () => Promise<void>;
    showTopicAction: (topicIdOrViewModel: guid | TopicViewModel) => Promise<void>;
    showTopicsAction: (topics?: ArrayStorage<TopicModel>) => Promise<void>;
    private initActions;
    private setContent;
    refresh(topicId?: guid | null, lastReadMessageTime?: string | null, needLoadTopics?: boolean, topics?: ArrayStorage<TopicModel> | null, keepEditorState?: boolean): Promise<void>;
    refreshTopics(needLoadTopics: boolean, topics?: ArrayStorage<TopicModel> | null): Promise<void>;
    refreshTopic(topicId: guid, lastReadMessageTime?: string | null, page?: number, newestMessage?: boolean, messageId?: string, searchText?: string, reverseOrder?: boolean, keepEditorState?: boolean): Promise<void>;
    showTopics(topics?: ArrayStorage<TopicModel>): Promise<void>;
    private showTopicsDefault;
    showTopic(topicIdOrViewModel: guid | TopicViewModel): Promise<void>;
    private showTopicDefault;
    tryGetTopics(): TopicListViewModel | null;
    tryGetTopicEditor(): TopicEditorViewModel | null;
    sendMessage(topicId: guid, message: MessageModel, getFileContent: (id: guid) => File | null): Promise<ValidationResult>;
    updateMessage(topicId: guid, message: MessageModel, getFileContent: (id: guid) => File | null): Promise<ValidationResult>;
    getMessages: (topicId: string, messageCount: number, page?: number, messageId?: string | null, lastReadMessageTime?: string | null, isNeedUpdateLastReadMessageTime?: boolean, searchText?: string | null, reverseOrder?: boolean) => Promise<[ForumResponse, ValidationResult]>;
    updateLastReadMessageTimeTopic(topicId: guid, lastReadMessageTime: string): void;
    private static getLastReadMessageTimeTopic;
    getSatelliteId(): Promise<guid | null>;
    addOnContentChangedAndInvoke(func: (args: ContentChangedEventArgs) => void): (() => void) | null;
    getState(): IControlState;
    setState(state: IControlState): boolean;
    toggleExpandMode(alwaysExpanded?: boolean): void;
    isEnableEditMessageButton(info: IStorage, messageModel: MessageModel): boolean;
    private openTopicWithCurrentMessageDefault;
    private saveForumSettingsDefault;
    private archiveTopicDefault;
    openQuoteLink(href: string): Promise<void>;
    openTopicLink(href: string): Promise<void>;
    openGenericLink: (href: string) => Promise<void>;
    addParticipants: (topicID: string, participant: ParticipantModel) => Promise<void>;
    addRoleParticipants: (topicID: string) => Promise<void>;
    subscribe: (topicID: string, subscribe: boolean) => Promise<void>;
    removeParticipants: (topicID: string, participants: string[]) => Promise<void>;
    setSettings: (settings: ForumSettingsModel) => Promise<void>;
    downloadAttachment(fileId: string): Promise<void>;
    downloadAttachmentContent(fileId: string): Promise<Blob | null>;
    private getFileContentRequest;
    readonly onContentChanged: EventHandler<(args: ContentChangedEventArgs) => void>;
    /**
     *  Событие, выполняемое перед открытием ссылки в обработчике IUriLinkHandler.
     *  Также позволяет отменить открытие ссылки в обработчике IUriLinkHandler.
     */
    readonly uriOpening: EventHandler<(args: UriLinkEventArgs) => void>;
    protected onUnloading(_validationResult: IValidationResultBuilder): void;
    notifyTabSelected(context: TabSelectedContext): Promise<void>;
}
export declare class ForumViewModelState {
    constructor(topicId: guid | null);
    private readonly _topicId;
    apply(control: ForumViewModel): boolean;
}
