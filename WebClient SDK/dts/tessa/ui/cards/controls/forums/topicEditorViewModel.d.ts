import { ForumViewModel } from './forumViewModel';
import { TopicViewModel } from './topicViewModel';
import { IAttachmentMenuContext } from './forumCommon';
import { ForumItemViewModel } from './forumItemViewModel';
import { UIButton } from 'tessa/ui/uiButton';
import { MenuAction } from 'tessa/ui/menuAction';
import { RichTextBoxAttachment } from 'ui/richTextBox/common';
import { IColorPalette } from 'ui/colorPicker';
import { MessageViewModelBase } from './messageViewModelBase';
import { SearchBoxViewModel } from './searchBoxViewModel';
import { IEmojiPickerViewModel } from 'ui/emojiModels/interfaces';
export interface ForumPager {
    readonly currentPage: number;
    readonly pageCount: number;
    readonly hasPreviousPage: boolean;
    readonly hasNextPage: boolean;
    firstPageButtonEnabled: boolean;
    setPage: (page: number) => Promise<void>;
}
export declare class TopicEditorViewModel implements ForumPager {
    constructor(forumViewModel: ForumViewModel, model: TopicViewModel);
    _fixMeAfterReleaseReactKey_: string;
    readonly forumViewModel: ForumViewModel;
    private readonly _topic;
    private _leftButtons;
    private _rightButtons;
    private _richTextBoxHoverButtons;
    private _currentPage;
    private _pageCount;
    private _hasPreviousPage;
    private _hasNextPage;
    private _firstPageButtonEnabled;
    private _separatorMessageId;
    private _messageAttachments;
    private _attachmentsAtom;
    private _htmlMessage;
    private _errorMessage;
    private _foregroundPalette;
    private _backgroundPalette;
    private _blockPalette;
    private readonly _emojiPickerViewModel;
    private _showDescriptionOverlay;
    private _showDescriptionPopover;
    private _mode;
    private _editedMessage;
    private _scrollTargetId;
    private _resetHistoryOnImport;
    private _searchBoxViewModel;
    private _searchMode;
    private _showSearchBox;
    private _showHeaderButtons;
    private _showEditor;
    private readonly _showBackToListButton;
    get topic(): TopicViewModel;
    get leftButtons(): UIButton[];
    get rightButtons(): UIButton[];
    get richTextBoxHoverButtons(): readonly UIButton[];
    readonly attachmentContextMenuGenerators: Array<(ctx: IAttachmentMenuContext) => void>;
    get currentPage(): number;
    get pageCount(): number;
    get hasPreviousPage(): boolean;
    get hasNextPage(): boolean;
    get separatorMessageId(): guid | null;
    get messageAttachments(): ReadonlyArray<RichTextBoxAttachment>;
    get htmlMessage(): string;
    set htmlMessage(value: string);
    get errorMessage(): string;
    get foregroundPalette(): IColorPalette;
    get backgroundPalette(): IColorPalette;
    get blockPalette(): IColorPalette;
    get emojiPickerViewModel(): IEmojiPickerViewModel;
    get showDescriptionOverlay(): boolean;
    set showDescriptionOverlay(value: boolean);
    get showDescriptionPopover(): boolean;
    set showDescriptionPopover(value: boolean);
    get mode(): 'edit' | 'send';
    get scrollTargetId(): string | null;
    set scrollTargetId(value: string | null);
    get resetHistoryOnImport(): boolean;
    set resetHistoryOnImport(value: boolean);
    get searchBoxViewModel(): SearchBoxViewModel;
    get searchMode(): boolean;
    set searchMode(value: boolean);
    get showSearchBox(): boolean;
    set showSearchBox(value: boolean);
    get showHeaderButtons(): boolean;
    set showHeaderButtons(value: boolean);
    get showEditor(): boolean;
    set showEditor(value: boolean);
    get firstPageButtonEnabled(): boolean;
    set firstPageButtonEnabled(value: boolean);
    get spellcheck(): boolean;
    set spellcheck(value: boolean);
    addMessageAttachments(...items: RichTextBoxAttachment[]): boolean;
    removeMessageAttachment(item: RichTextBoxAttachment): void;
    changeMessageAttachment(item: RichTextBoxAttachment): void;
    clearMessageAttachments(): void;
    private initMenuActions;
    previewAttachment(attachment: ForumItemViewModel | RichTextBoxAttachment): Promise<void>;
    private initRichTextBoxButtons;
    private initAttachmentContextMenu;
    private initErrorMessage;
    private initPalettes;
    initMessageActions(): void;
    private initSearchBox;
    private initMode;
    sendMessage(message: string): Promise<void>;
    updateMessage(message: string): Promise<void>;
    private mergeItems;
    private removeUnusedInnerAttachments;
    private static fileToItem;
    private static innerToItem;
    private static externalInnerToItem;
    private static linkToItem;
    private enablePrevNextButton;
    private rearrangePages;
    setPage(page: number): Promise<void>;
    initSeparator(): void;
    getAttachmentContextMenu(item: ForumItemViewModel): MenuAction[];
    onReply: (viewModel: MessageViewModelBase) => Promise<void>;
    onEdit: (viewModel: MessageViewModelBase) => void;
    onGetLink: (viewModel: MessageViewModelBase, forWeb: boolean) => Promise<void>;
    onCopy: (viewModel: MessageViewModelBase) => Promise<void>;
    onLinkClick: (e: React.MouseEvent, href: string) => Promise<void>;
    onOpenInnerAttachment: (id: string) => Promise<void>;
    private handleFileLinkClick;
    private getRequest;
    private getExpandButtonIcon;
    private getExpandButtonTooltip;
    setDescriptionOverlay: (value: boolean) => void;
    setDescriptionPopover: (value: boolean) => void;
    onScrollComplete: () => void;
    onImportComplete: () => void;
    private loadMessages;
    highlightMessage: (id: string) => void;
    private onSearchBoxShow;
    private onSearchBoxHide;
    private onSearchBoxSearch;
    private onSearchBoxBackToResults;
    private readOnlyParticipantMode;
    private ordinaryParticipantMode;
    private validateAttachmentsSize;
    private validateAttachmentsCount;
    onContentWidthRatioChange: (diff: number) => void;
    onContentWidthRatioChangeComplete: () => void;
    onEditorResize: (diff: number) => boolean;
    onEditorResizeEnd: (containerHeight: number, saveForumSettings: boolean) => Promise<void>;
    dispose(): void;
    onKeyPress: (event: React.KeyboardEvent) => void;
}
