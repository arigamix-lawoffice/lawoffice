import { MessageViewModelBase } from './messageViewModelBase';
import { ForumViewModel } from './forumViewModel';
import { ForumAvatarViewModel } from './forumAvatarViewModel';
import { ForumItemViewModel } from './forumItemViewModel';
import { TopicViewModelBase } from './topicViewModelBase';
import { MessageModel } from 'tessa/forums';
import { UIButton } from 'tessa/ui';
export declare class MessageViewModel extends MessageViewModelBase {
    constructor(forumViewModel: ForumViewModel, topic: TopicViewModelBase, model: MessageModel, isVisibleEditAction?: (messageModel: MessageModel) => boolean, useDefaultMenu?: boolean);
    private _authorName;
    private _avatar;
    private _items;
    private _innerItems;
    private _showFullMessage;
    private _displayMode;
    private _messagePreview;
    private _replyAction?;
    private _editAction?;
    private _getLinkAction?;
    private _copyAction?;
    private _isVisibleEditAction;
    private _menu;
    private _highlight;
    get authorName(): string;
    set authorName(value: string);
    get avatar(): ForumAvatarViewModel;
    set avatar(value: ForumAvatarViewModel);
    get items(): ForumItemViewModel[];
    get innerItems(): ForumItemViewModel[];
    get showFullMessage(): boolean;
    get displayMode(): 'compact' | 'normal';
    set displayMode(value: 'compact' | 'normal');
    get messagePreview(): string | null;
    set replyAction(value: ((viewModel: MessageViewModelBase) => void) | undefined);
    set editAction(value: ((viewModel: MessageViewModelBase) => void) | undefined);
    set getLinkAction(value: ((viewModel: MessageViewModelBase, forWeb?: boolean) => void) | undefined);
    set copyAction(value: ((viewModel: MessageViewModelBase) => void) | undefined);
    get isVisibleEditAction(): boolean;
    get menu(): readonly UIButton[] | null;
    set menu(value: readonly UIButton[] | null);
    get highlight(): boolean;
    set highlight(value: boolean);
    private initAttachments;
    protected initMenu(modifyContextMenu?: (menu: UIButton[]) => void): void;
    toggleFullMessage(): void;
    onReply: () => void;
    onEdit: () => void;
    onGetLink: () => void;
    onGetWebLink: () => void;
    onCopy: () => void;
    refreshMessagePreview: () => void;
    private requiresPreview;
    private tryConstructPreview;
    private matchSubstring;
    private getTagType;
}
