export declare class CardUserSettingsManager {
    private constructor();
    private static _instance;
    static get instance(): CardUserSettingsManager;
    private _timer;
    private _commitPromise;
    private _changedKeys;
    private onTimerTick;
    private static getPendingRequest;
    private commitPendingChangesCore;
    /**
     * Возвращает признак того, что имеются неотправленные на сервер уведомления об изменённых настройках.
     * @returns `true`, если имеются неотправленные на сервер уведомления об изменённых настройках;
     * `false` в противном случае.
     */
    hasPendingChanges(): boolean;
    /**
     * Возвращает признак того, что фоновый обработчик был запущен вызовом {@link enableBackgroundWorker}.
     * @returns `true`, если фоновый обработчик был запущен; `false` в противном случае.
     */
    isBackgroundWorkerRunning(): boolean;
    /**
     * Запускает фоновый обработчик, отправляющий изменённые настройки на сервер,
     * если он не запущен и параметр {@link enabled} равен `true`,
     * или останавливает фоновый обработчик, если он запущен и параметр {@link enabled} равен `false`.
     * @param enabled Признак того, что фоновый обработчик необходимо запустить, если он не запущен.
     * Если указано `false`, то определяет, что фоновый обработчик необходимо остановить, если он запущен.
     */
    enableBackgroundWorker(enabled: boolean): void;
    /**
     * Уведомляет систему о том, что были изменены настройки по указанному ключу,
     * которые требуется отправить на сервер.
     * @param key Ключ, настройки по которому были изменены.
     */
    notifyChanged(key: string): void;
    /**
     * Немедленно отправляет изменённые настройки пользователя на сервер и ожидает окончание отправки.
     *
     * Рекомендуется вызывать этот метод только при закрытии приложения.
     *
     * При обычной работе приложения настройки отправляются в фоновом режиме, когда включён
     * фоновый обработчик вызовом {@link enableBackgroundWorker}.
     */
    commitPendingChanges(): Promise<void>;
    /**
     * Возвращает функцию, которую необходимо выполнить при закрытии приложения для сохранения настроек,
     * при этом выполняется POST-запрос посредством метода {@link postOnPageClose}.
     * Функция возвращает `true`, если успешно отправлено или поставлено в очередь отправки; в противном случае - `false`.
     *
     * Возвращает `null`, если отсутствуют ожидающие сохранения настройки.
     *
     * Эффект аналогичен вызову метода {@link commitPendingChanges}, но его можно использовать исключительно при закрытии приложения,
     * причём после вызова возвращённой функции нельзя использовать методы текущего объекта,
     * а фоновая активность должна быть предварительно остановлена вызовом {@link enableBackgroundWorker} с параметром `false`.
     * @returns Функция, которую необходимо выполнить при закрытии приложения для сохранения настроек,
     * или `null`, если отсутствуют ожидающие сохранения настройки.
     */
    getPostOnPageCloseCallback(): (() => boolean) | null;
}
