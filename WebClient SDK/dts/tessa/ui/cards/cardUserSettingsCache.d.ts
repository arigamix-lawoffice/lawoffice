import { CardTypeSealed } from 'tessa/cards/types/cardType';
import { CardTypeBlockSealed, CardTypeControlSealed, CardTypeFormSealed } from 'tessa/cards/types/cardTypeCommon';
import { IStorage } from 'tessa/platform/storage/storage';
/**
 * Кэш настроек пользователя для элементов карточки (например, элементов управления),
 * размещаемых в пределах типа (карточки, файла, задания, диалога).
 */
export declare class CardUserSettingsCache {
    private constructor();
    private static _instance;
    static get instance(): CardUserSettingsCache;
    private _settings;
    private static createMapWithCloning;
    private static createStorageWithCloning;
    private static cloneValue;
    private static cloneStorage;
    /**
     * Возвращает глобально уникальный алиас настроек пользователя, соответствующих указанному элементу управления.
     * @param control Метаинформация по элементу управления.
     * @param type Метаинформация по типу, в который включён элемент управления.
     * @param parameter Строка с дополнительными параметрами, по которым должны различаться одинаковые элементы управления в пределах типа
     * (например, алиас типа представления, с которым связан элемент управления "Представление"),
     * или `null`, если параметры отсутствуют.
     * @returns Ключ, по которому должен выполняться поиск настроек пользователя для элемента управления.
     */
    getControlDefaultKey(control: CardTypeControlSealed, type: CardTypeSealed, parameter?: string | null): string;
    /**
     * Возвращает глобально уникальный алиас настроек пользователя, соответствующих указанному блоку в типе.
     * @param block Метаинформация по блоку.
     * @param type Метаинформация по типу, в который включён блок.
     * @param parameter Строка с дополнительными параметрами, по которым должны различаться одинаковые блоки в пределах типа,
     * или `null`, если параметры отсутствуют.
     * @returns Ключ, по которому должен выполняться поиск настроек пользователя для блока.
     */
    getBlockDefaultKey(block: CardTypeBlockSealed, type: CardTypeSealed, parameter?: string | null): string;
    /**
     * Возвращает глобально уникальный алиас настроек пользователя, соответствующих указанной форме (вкладке) в типе.
     * @param form Метаинформация по форме (вкладке).
     * @param type Метаинформация по типу, в который включена форма (вкладка).
     * @param parameter Строка с дополнительными параметрами, по которым должны различаться одинаковые блоки в пределах типа,
     * или `null`, если параметры отсутствуют.
     * @returns Ключ, по которому должен выполняться поиск настроек пользователя для формы.
     */
    getFormDefaultKey(form: CardTypeFormSealed, type: CardTypeSealed, parameter?: string | null): string;
    /**
     * Возвращает настройки элемента карточки (например, элемента управления) по указанному ключу.
     * Если настройки отсутствуют, то они создаются как пустая хеш-таблица.
     * @param key Ключ, по которому доступны настройки. Ключ, рекомендуемый для использования по умолчанию,
     * можно получить посредством вызова {@link getControlDefaultKey}.
     * @returns Настройки элемента карточки.
     * @see setSettings В действительности возвращается копия сериализуемых настроек.
     * Вызовите метод {@link setSettings}, чтобы сохранить их для последующего резолва.
     */
    getSettings(key: string): Map<string, unknown>;
    /**
     * Возвращает настройки элемента карточки (например, элемента управления) по указанному ключу
     * в виде копии исходных данных {@link IStorage}.
     * Если настройки отсутствуют, то они создаются как пустая хеш-таблица.
     * @param key Ключ, по которому доступны настройки. Ключ, рекомендуемый для использования по умолчанию,
     * можно получить посредством вызова {@link getControlDefaultKey}.
     * @returns Настройки элемента карточки.
     */
    getSettingsStorage(key: string): IStorage;
    /**
     * Устанавливает настройки элемента карточки (например, элемента управления) по указанному ключу.
     * @param key Ключ, по которому доступны настройки. Ключ, рекомендуемый для использования по умолчанию,
     * можно получить посредством вызова {@link getControlDefaultKey}.
     * @param settings Сериализуемые настройки элемента карточки.
     */
    setSettings(key: string, settings: Map<string, unknown>): void;
    /**
     * Удаляет настройки элемента карточки (например, элемента управления) по указанному ключу.
     * @param key Ключ, по которому доступны настройки. Ключ, рекомендуемый для использования по умолчанию,
     * можно получить посредством вызова {@link getControlDefaultKey}.
     */
    removeSettings(key: string): void;
    /**
     * Возвращает объект, содержащий настройки всех элементов карточки (например, элементов управления),
     * которые сохраняются в профиле пользователя. Не выполняет копирования настроек.
     * @returns Настройки всех элементов карточки.
     */
    getAllSettings(): IStorage<IStorage>;
    /**
     * Устанавливает объект, содержащий настройки всех элементов карточки (например, элементов управления),
     * которые загружены из профиля пользователя.
     * @param settings Настройки всех элементов карточки.
     */
    setAllSettings(settings: IStorage<IStorage>): void;
}
