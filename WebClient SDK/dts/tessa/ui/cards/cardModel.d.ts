import { CardModelFlags } from './cardModelFlags';
import { CardModelTableInfo } from './cardModelTableInfo';
import { RowEditingType, CardRowFormContext } from './cardRowFormContext';
import { ICardModel, IFormViewModelBase, IFormWithBlocksViewModel, IFormWithTabsViewModel, IBlockViewModel, IControlViewModel, CardControlCreationOverride, CardControlInitializer, CardBlockInitializer, CardFormInitializer, CardTaskInitializer, ICardAdditionalContentViewModel } from './interfaces';
import { PreviewManager } from './previewManager';
import { CardSavingRequest } from './cardSavingRequest';
import { Card, CardRow, CardTask, ICAdESProvider } from 'tessa/cards';
import { CardMetadataSealed, CardMetadataBinder, CardMetadataFunctionRole } from 'tessa/cards/metadata';
import { CardTypeSealed } from 'tessa/cards/types';
import { FileContainer } from 'tessa/files';
import { IUIContext } from 'tessa/ui/uiContext';
import { ValidationResult } from 'tessa/platform/validation';
import { TaskViewModel, TaskHistoryViewModel } from 'tessa/ui/cards/tasks';
import { DefaultPreviewAreaViewModel } from 'tessa/ui/cards/forms';
import { IStorage } from 'tessa/platform/storage';
export declare class CardModel implements ICardModel {
    constructor(card: Card, sectionRows: Map<string, CardRow>, cardMetadata: CardMetadataSealed);
    constructor(card: Card, sectionRows: ReadonlyMap<string, CardRow>, cardMetadata: CardMetadataSealed, cardTask: CardTask | null, functionRoles: CardMetadataFunctionRole[], cardTypeId: guid, generalMetadata: CardMetadataSealed, binder: CardMetadataBinder, forms: IFormWithBlocksViewModel[], blocks: ReadonlyMap<string, IBlockViewModel>, controls: ReadonlyMap<string, IControlViewModel>, table: CardModelTableInfo, tableStack: CardModelTableInfo[], formBag: ReadonlyArray<IFormWithBlocksViewModel>, blockBag: ReadonlyArray<IBlockViewModel>, controlBag: ReadonlyArray<IControlViewModel>, fileContainer: FileContainer, contextExecutor: (action: (context: IUIContext) => void) => void, info: IStorage, isRowForm: boolean, hasActiveValidation: boolean);
    private _tableStack;
    private _isRowForm;
    private _rowFormContext;
    private _contextExecutor;
    private _savingFunc;
    private _isClosed;
    private _digest;
    private _lastRequest;
    private _header;
    readonly componentId: guid;
    readonly card: Card;
    readonly sectionRows: ReadonlyMap<string, CardRow>;
    readonly cardMetadata: CardMetadataSealed;
    readonly generalMetadata: CardMetadataSealed;
    readonly binder: CardMetadataBinder;
    readonly cardType: CardTypeSealed;
    parentModel: ICardModel | null;
    cardTask: CardTask | null;
    functionRoles: ReadonlyMap<guid, CardMetadataFunctionRole>;
    mainForm: IFormViewModelBase | null;
    get mainFormWithBlocks(): IFormWithBlocksViewModel | null;
    get mainFormWithTabs(): IFormWithTabsViewModel | null;
    readonly forms: ReadonlyArray<IFormWithBlocksViewModel>;
    readonly formsBag: ReadonlyArray<IFormWithBlocksViewModel>;
    readonly blocks: ReadonlyMap<string, IBlockViewModel>;
    readonly blocksBag: ReadonlyArray<IBlockViewModel>;
    readonly controls: ReadonlyMap<string, IControlViewModel>;
    readonly controlsBag: ReadonlyArray<IControlViewModel>;
    table: CardModelTableInfo | null;
    get tableStack(): ReadonlyArray<CardModelTableInfo>;
    hasActiveValidation: boolean;
    flags: CardModelFlags;
    readonly info: IStorage;
    currentRow: ICardModel | null;
    get rowFormContext(): CardRowFormContext | null;
    fileContainer: FileContainer;
    readonly previewManager: PreviewManager;
    readonly edsProvider: ICAdESProvider;
    get inSpecialMode(): boolean;
    get digest(): string;
    set digest(value: string);
    stateIsInitialized: boolean;
    contextIsInitialized: boolean;
    get lastRequest(): CardSavingRequest | null;
    closingRequest: CardSavingRequest | null;
    get header(): ICardAdditionalContentViewModel | null;
    set header(header: ICardAdditionalContentViewModel | null);
    readonly controlCreationOverrides: Array<CardControlCreationOverride>;
    readonly controlInitializers: Array<CardControlInitializer>;
    readonly blockInitializers: Array<CardBlockInitializer>;
    readonly formInitializers: Array<CardFormInitializer>;
    readonly taskInitializers: Array<CardTaskInitializer>;
    setActiveValidation(validation?: boolean): void;
    close(): Promise<void>;
    commitChanges(info?: IStorage): Promise<ValidationResult>;
    createEmptyRow(sectionName: string): CardRow;
    createForRow(sectionName: string, rowIndex: number): ICardModel;
    createRowFormContext(editingType: RowEditingType, initFunc: (context: CardRowFormContext) => Promise<boolean>, closeFunc: (context: CardRowFormContext) => Promise<boolean>): Promise<CardRowFormContext>;
    setContextExecutor(executor: (action: (context: IUIContext) => void) => void): void;
    executeInContext: (action: (context: IUIContext) => void) => Promise<void>;
    setSavingFunc(action: (request?: CardSavingRequest) => Promise<ValidationResult>): void;
    setFunctionRoles(functionRoles?: CardMetadataFunctionRole[]): void;
    saveAsync: (request?: CardSavingRequest | undefined) => Promise<ValidationResult>;
    hasChanges(ignoreForceChanges?: boolean): Promise<boolean>;
    tryGetPreviewArea(): DefaultPreviewAreaViewModel | null;
    tryGetTasks(): TaskViewModel[] | null;
    tryGetTaskHistory(): TaskHistoryViewModel | null;
    clearBags(): void;
}
