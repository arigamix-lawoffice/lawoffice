import { IStorage } from 'tessa/platform/storage';
export interface ThemeSettings {
    window: {
        windowChromeBackground: string;
        windowChromeBorderBrush: string;
    };
    tabPanel: {
        foregroundColor: string;
        backgroundColor: string;
        borderTop: string;
        borderBottom: string;
        separatorLeft: string;
        separatorRight: string;
        highlightColor: string;
        buttonForeground: string;
        workplacesDropDownButtonForeground: string;
        contextMenuForeground: string;
        contextMenuBackground: string;
        contextMenuBorder: string;
        contextMenuHighlight: string;
        contextMenuHighlightBorder: string;
    };
    tiles: {
        background: string;
        foreground: string;
        hoverColor: string;
        dividerColor: string;
        sliderForeground: string;
        sliderBackground: string;
        hotkeyColor: string;
        scrollerForeground: string;
        scrollerBackground: string;
    };
    views: {
        filterMenuBackground: string;
        filterMenuForeground: string;
        filterAreaBackground: string;
        filterAreaBorderBrush: string;
        filterParameterForeground: string;
        filterOperatorForeground: string;
        filterValueForeground: string;
        toolbarBackground: string;
        toolbarBorder: string;
        toolbarButton: string;
        toolbarDisabledButton: string;
        quickSearchForeground: string;
        quickSearchWatermark: string;
        quickSearchBackground: string;
        pagingForeground: string;
        pagingWatermark: string;
        pagingBackground: string;
        pagingBorder: string;
        rowCountForeground: string;
        rowCountHoverForeground: string;
        rowCountBackground: string;
        rowCountHoverBackground: string;
        dialogSelectButtonBackground: string;
    };
    workplaceTree: {
        foregroundColor: string;
        expanderForeground: string;
        iconForeground: string;
        subsetForeground: string;
        backgroundColor: string;
        mobileBackgroundColor: string;
        verticalOffsetBackground: string;
        menuBackground: string;
        menuForeground: string;
        extraBackground: string;
        hightlightColor: string;
        selectedColor: string;
        scrollerBackground: string;
        scrollerForeground: string;
    };
    files: {
        fileListBackground: string;
        fileVersionsBackground: string;
        fileGroupBackground: string;
        fileGroupBackgroundHover: string;
        fileGroupBackgroundPressed: string;
        fileBackground: string;
        fileBusyBackground: string;
        fileModifiedBackground: string;
        fileNotReadyBackground: string;
        fileErrorBackground: string;
        fileCurrentTaskTagBackground: string;
        fileSignatureNotChecked: string;
        fileSignatureChecked: string;
        fileSignatureCheckedWithWarning: string;
        fileSignatureFailed: string;
        filePlaceholderBackground: string;
        filePlaceholderForeground: string;
    };
    tasks: {
        taskBackground: string;
        taskBorder: string;
        taskForeground: string;
        taskSeparatorForeground: string;
        taskLinkForeground: string;
        taskTypeForeground: string;
        taskTypeAccessoryForeground: string;
        taskTypeToggleForeground: string;
        taskTypeToggleForegroundHover: string;
        taskTypeToggleForegroundPressed: string;
        taskTypeToggleBackground: string;
        taskTypeToggleBackgroundHover: string;
        taskTypeToggleBackgroundPressed: string;
        taskButtonForeground: string;
        taskButtonBackground: string;
        taskButtonBackgroundHover: string;
        taskButtonBackgroundPressed: string;
        taskButtonBackgroundWorkspaceHover: string;
        taskTagBackground: string;
        taskTagBackgroundHover: string;
        taskTagBackgroundPressed: string;
    };
    card: {
        cardControlCaption: string;
        cardDialogBackground: string;
        cardDisabledBackground: string;
        cardEditorBackground: string;
        cardVisualizerBackground: string;
        cardPreviewBackground: string;
        cardRowBackground: string;
        cardStatusBarForeground: string;
        cardStatusBarForegroundHover: string;
        cardStatusBarBackground: string;
        cardStatusBarBackgroundHover: string;
        cardBlockCaptionBackgroundNormal: string;
        cardBlockCaptionBackgroundHover: string;
        cardBlockCaptionBackgroundPressed: string;
        cardBlockCaptionBorderNormal: string;
        cardBlockCaptionBorderHover: string;
        cardBlockCaptionBorderPressed: string;
        cardSelectorBackground: string;
        cardSelectorBackgroundHover: string;
        cardSelectorGroupBackground: string;
        cardSelectorGroupHighlight: string;
        cardToolbarForeground: string;
        cardToolbarBackground: string;
        cardToolbarHoverBackground: string;
        cardBottomToolbarForeground: string;
        cardBottomToolbarBackground: string;
        cardBottomToolbarHoverBackground: string;
    };
    grid: {
        activeBackground: string;
        notActiveHover: string;
        gridViewForeground: string;
        gridViewDisabledForeground: string;
        gridViewBackground: string;
        gridViewBorder: string;
        gridViewHeaderBackground: string;
        gridViewHeaderGripper: string;
    };
    tabControl: {
        tabControlBorder: string;
        tabControlBackground: string;
        tabControlCardBackground: string;
        tabControlSelectedBackground: string;
        tabControlHighlightBackground: string;
    };
    messageBox: {
        messageBoxImageErrorBrush: string;
        messageBoxImageInformationBrush: string;
        messageBoxImageQuestionBrush: string;
        messageBoxImageWarningBrush: string;
    };
    common: {
        [key: string]: string;
    };
}
export declare class Theme {
    constructor(storage: IStorage);
    private _storage;
    private _settings;
    static empty: Theme;
    get name(): string;
    get caption(): string;
    get hidden(): boolean;
    get wallpapers(): ReadonlyArray<string>;
    get defaultWallpaper(): string | null;
    get settings(): ThemeSettings;
    tryGetValue<T>(field: string, defaultValue?: T): T | null;
    tryGetColor(field: string, defaultValue?: string): string;
    private getColorFromSettings;
    private createSettings;
}
