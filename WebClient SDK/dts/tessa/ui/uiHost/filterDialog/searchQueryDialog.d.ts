import { SearchQueryMetadataSealed } from 'tessa/views/searchQueries';
export declare function showSearchQueryDialog(viewModel: SearchQueryDialogViewModel): Promise<boolean>;
export declare class SearchQueryDialogViewModel {
    constructor();
    private _queries;
    private _publicQueries;
    private _userQueries;
    private _isPublicQueriesEnabled;
    private _isUserQueriesEnabled;
    private _isPublicQueriesOpen;
    private _isUserQueriesOpen;
    private _currentQuery;
    private _name;
    private _isPublic;
    private _isPublicQueryCheckBoxVisible;
    private _needSelectedQuery;
    get isPublicQueriesEnabled(): boolean;
    set isPublicQueriesEnabled(value: boolean);
    get isUserQueriesEnabled(): boolean;
    set isUserQueriesEnabled(value: boolean);
    get isPublicQueriesOpen(): boolean;
    set isPublicQueriesOpen(value: boolean);
    get isUserQueriesOpen(): boolean;
    set isUserQueriesOpen(value: boolean);
    get publicQueries(): SearchQueryMetadataSealed[];
    get userQueries(): SearchQueryMetadataSealed[];
    get currentQuery(): SearchQueryMetadataSealed | null;
    set currentQuery(value: SearchQueryMetadataSealed | null);
    get name(): string;
    set name(value: string);
    get isPublic(): boolean;
    set isPublic(value: boolean);
    get isPublicQueryCheckBoxVisible(): boolean;
    set isPublicQueryCheckBoxVisible(value: boolean);
    get needSelectedQuery(): boolean;
    set needSelectedQuery(value: boolean);
    get queries(): SearchQueryMetadataSealed[];
    canDeleteQueries: boolean;
    checkedQueries: Set<SearchQueryMetadataSealed>;
    refresh(): void;
    private getPublicQueries;
    private getUserQueries;
    deleteCheckedQueries(): Promise<void>;
    exportCheckedQueries(): Promise<void>;
    importSearchQueries(): Promise<void>;
}
