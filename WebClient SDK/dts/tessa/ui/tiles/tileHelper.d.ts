import { TileCommand } from './tile';
import { ITileWorkspace, ITile, ITilePanel } from './interfaces';
import { TileDirection } from './tileDirection';
import { TileContextSource } from './tileContextSource';
import { TileEvaluationEventArgs } from './tileEvaluationEventArgs';
import { IExtensionExecutor } from 'tessa/extensions';
import { Card } from 'tessa/cards';
import { IStorage } from 'tessa/platform/storage';
export declare function createBackTile(direction: TileDirection, context: TileContextSource, command: TileCommand): ITile;
export declare function initializeGlobal(workspace: ITileWorkspace): void;
export declare function initializeLocal(workspace: ITileWorkspace): IExtensionExecutor;
export declare function finalizedLocal(workspace: ITileWorkspace, executor: IExtensionExecutor): void;
export declare function openingLocal(workspace: ITileWorkspace, panel: ITilePanel, executor: IExtensionExecutor): void;
export declare function closedLocal(workspace: ITileWorkspace, panel: ITilePanel, executor: IExtensionExecutor): void;
export declare function enableWhenVisibleInCardHandler(e: TileEvaluationEventArgs): void;
export declare function isTileVisibleInModel(card: Card, tileName: string): boolean;
export declare function disableWithCollapsing(tile: ITile, disableTile?: boolean, disableChildren?: boolean): void;
export declare function openMarkedCard(mark: string | null, proceedConfirmation: (() => Promise<boolean>) | null, proceedAndSaveCardConfirmation: (() => Promise<boolean | null>) | null, continuationOnSuccessFunc?: (() => Promise<boolean>) | null, getInfo?: IStorage | null): Promise<boolean>;
export declare function getUnavailableTypes(): Promise<guid[]>;
