import { CardTableViewCellViewModel } from './cardTableViewCellViewModel';
import { CardTypeControl, CardTypeTableControl } from 'tessa/cards/types';
import { SchemeDbType, EventHandler, Visibility } from 'tessa/platform';
import { IStorage } from 'tessa/platform/storage';
import { UIButton } from 'tessa/ui';
import { ICardModel } from 'tessa/ui/cards';
import { ViewControlViewModel, GridRowAddingEventArgs, GridRowEventArgs, GridRowValidationEventArgs } from 'tessa/ui/cards/controls';
import { ITableRowViewModel } from 'tessa/ui/views/content';
import { IGridRowTagViewModel } from 'components/cardElements/grid/interfaces';
export declare class CardTableViewControlViewModel extends ViewControlViewModel {
    constructor(control: CardTypeControl, model: ICardModel, tableControl: CardTypeTableControl, extensionSettings: IStorage | null);
    private _tableSettings;
    private _extensionSettings;
    private _orderedColumns;
    private _columnInfos;
    private _sectionName;
    private _flagColumnName;
    private _orderColumnName;
    private _referenceColumnNames;
    private _canSort;
    private _sectionRows;
    private _rowsListener;
    private _rowsData;
    private _formContainer;
    private _gridBase;
    private _searchText;
    protected _alwaysShowBottomToolbar: boolean;
    private _orderReactions;
    get sectionName(): string;
    get searchText(): string;
    get alwaysShowBottomToolbar(): boolean;
    set alwaysShowBottomToolbar(value: boolean);
    addRowButton: UIButton;
    deleteRowsButton: UIButton;
    moveUpButton: UIButton;
    moveDownButton: UIButton;
    private _refreshOnRowDeletion;
    initialize(): void;
    dispose(): void;
    private initializeForm;
    private initializeCardColumnInfo;
    private initializeReferenceColumns;
    private initializeRowContexMenuGenerators;
    private initializeViewColumns;
    private initializeRows;
    private initializeClicks;
    private initializeKeyDownHandlers;
    private initializeButtons;
    private getGridViewModelBase;
    protected initializeColumns(): void;
    addRowAction(): Promise<void>;
    onCanExecuteAddRow(): boolean;
    deleteRowsAction(): Promise<void>;
    onCanExecuteDeleteRows(): boolean;
    onCanExecuteMoveSelectedRowsUp(): boolean;
    moveSelectedRowsUp(): void;
    onCanExecuteMoveSelectedRowsDown(): boolean;
    moveSelectedRowsDown(): void;
    getSearchBoxVisibility(): Visibility;
    getViewData(): Promise<{
        columns: ReadonlyMap<string, SchemeDbType>;
        rows: ReadonlyArray<ReadonlyMap<string, any>>;
        rowCount: number;
        tags: Map<guid, IGridRowTagViewModel[]>;
    } | null>;
    canSetSearchText(): boolean;
    setSearchText(text: string): void;
    editRow(row: ITableRowViewModel | null): Promise<void>;
    private inCurrentPage;
    readonly rowAdding: EventHandler<(args: GridRowAddingEventArgs<CardTableViewControlViewModel>) => void>;
    readonly rowInvoked: EventHandler<(args: GridRowEventArgs<CardTableViewControlViewModel, CardTableViewCellViewModel>) => void>;
    readonly rowInitializing: EventHandler<(args: GridRowEventArgs<CardTableViewControlViewModel, CardTableViewCellViewModel>) => void>;
    readonly rowInitialized: EventHandler<(args: GridRowEventArgs<CardTableViewControlViewModel, CardTableViewCellViewModel>) => void>;
    readonly rowEditorClosing: EventHandler<(args: GridRowEventArgs<CardTableViewControlViewModel, CardTableViewCellViewModel>) => void>;
    readonly rowEditorClosed: EventHandler<(args: GridRowEventArgs<CardTableViewControlViewModel, CardTableViewCellViewModel>) => void>;
    readonly rowValidating: EventHandler<(args: GridRowValidationEventArgs<CardTableViewControlViewModel>) => void>;
}
