import { IFileCreationToken } from './fileCreationToken';
import { IFileVersionCreationToken } from './fileVersionCreationToken';
import { IFile } from './file';
import { IFileSignatureCreationToken } from './fileSignatureCreationToken';
import { IFileVersion } from './fileVersion';
import { IFileSignature } from './fileSignature';
import { FileSignatureLoadingMode } from './fileSignatureLoadingMode';
import { IFilePermissions } from './filePermissions';
import { IUserSession } from 'common/utility/userSession';
import { IUIContext } from 'tessa/ui';
import { Result, ResultWithInfo } from 'tessa/platform/result';
import { IStorage } from 'tessa/platform/storage';
import { CardFileContentSource } from 'tessa/cards';
export interface IFileSource {
    createFile(token: IFileCreationToken): IFile;
    createFileVersion(token: IFileVersionCreationToken, file: IFile, content: File | null): IFileVersion;
    createSignature(token: IFileSignatureCreationToken, version: IFileVersion): IFileSignature;
    getFileCreationToken(): IFileCreationToken;
    getVersionCreationToken(): IFileVersionCreationToken;
    getSignatureCreationToken(): IFileSignatureCreationToken;
    getFiles(): Promise<Result<IFile[]>>;
    getVersions(file: IFile): Promise<Result<IFileVersion[]>>;
    getSignatures(version: IFileVersion, loadingMode: FileSignatureLoadingMode): Promise<Result<IFileSignature[]>>;
    getContent(file: IFile, info?: IStorage): Promise<ResultWithInfo<File>>;
    getContent(fileVersion: IFileVersion, info?: IStorage): Promise<ResultWithInfo<File>>;
    saveContent(file: IFile, info?: IStorage): Promise<Result<boolean>>;
    saveContent(fileVersion: IFileVersion, info?: IStorage): Promise<Result<boolean>>;
    copy(file: IFile, withoutContent?: boolean): Result<IFile>;
    setExternalContent(file: IFile, externalFileVersion: IFileVersion | null): boolean;
    setExternalContent(file: IFile, fileSource: CardFileContentSource | null): boolean;
    getLink(file: IFile, info?: IStorage, withVersion?: boolean): string;
    getLink(fileVersion: IFileVersion, info?: IStorage): string;
    getLinkData(file: IFile, info?: IStorage): IStorage | null;
    getLinkData(fileVersion: IFileVersion, info?: IStorage): IStorage | null;
    notifyAdded(file: IFile, isVirtual: boolean): any;
    notifyRemoved(file: IFile): any;
    notifyReverted(file: IFile): any;
    notifyCategoryModified(file: IFile): any;
    notifyNameModified(file: IFile): any;
    notifyContentModified(file: IFile): any;
    notifyContentReplaced(file: IFile): any;
    notifyOriginModified(file: IFile): any;
    notifyOptionsModified(file: IFile): any;
    notifyNewVersionTagsModified(file: IFile): any;
    notifySignAdded(sign: IFileSignature): any;
    notifySignRemoved(sign: IFileSignature): any;
    notifySignModified(sign: IFileSignature): any;
    tryGetSourceObjectId(file: IFile): guid | null;
    getNewFilePermissions(): IFilePermissions;
}
export declare abstract class FileSource implements IFileSource {
    constructor(session: IUserSession, executeInContextFunc?: ((action: (context: IUIContext) => void) => void) | null);
    protected _session: IUserSession;
    protected _executeInContextFunc: ((action: (context: IUIContext) => void) => void) | null;
    protected executeInContext(action: (context: IUIContext) => void): Promise<void>;
    protected createFileCore(token: IFileCreationToken): IFile;
    protected createVersionCore(token: IFileVersionCreationToken, file: IFile, content: File | null): IFileVersion;
    protected createSignatureCore(token: IFileSignatureCreationToken, version: IFileVersion): IFileSignature;
    protected getFileCreationTokenCore(): IFileCreationToken;
    protected getVersionCreationTokenCore(): IFileVersionCreationToken;
    protected getSignatureCreationTokenCore(): IFileSignatureCreationToken;
    protected getFilesCore(): Promise<Result<IFile[]>>;
    protected getVersionsCore(_file: IFile): Promise<Result<IFileVersion[]>>;
    protected getSignaturesCore(_version: IFileVersion, _loadingMode: FileSignatureLoadingMode): Promise<Result<IFileSignature[]>>;
    protected getContentCore(_fileOrFileVersion: IFile | IFileVersion, _info?: IStorage): Promise<ResultWithInfo<File>>;
    protected saveContentCore(_fileOrFileVersion: IFile | IFileVersion, _info?: IStorage): Promise<Result<boolean>>;
    protected copyCore(file: IFile, withoutContent: boolean): Result<IFile>;
    setExternalContentCore(file: IFile, externalFileVersion: IFileVersion | null): boolean;
    setExternalContentCore(file: IFile, fileSource: CardFileContentSource | null): boolean;
    createFile(token: IFileCreationToken): IFile;
    createFileVersion(token: IFileVersionCreationToken, file: IFile, content: File | null): IFileVersion;
    createSignature(token: IFileSignatureCreationToken, version: IFileVersion): IFileSignature;
    getFileCreationToken(): IFileCreationToken;
    getVersionCreationToken(): IFileVersionCreationToken;
    getSignatureCreationToken(): IFileSignatureCreationToken;
    getFiles(): Promise<Result<IFile[]>>;
    getVersions(file: IFile): Promise<Result<IFileVersion[]>>;
    getSignatures(version: IFileVersion, loadingMode: FileSignatureLoadingMode): Promise<Result<IFileSignature[]>>;
    getContent(file: IFile): Promise<ResultWithInfo<File>>;
    getContent(fileVersion: IFileVersion): Promise<ResultWithInfo<File>>;
    saveContent(file: IFile, info?: IStorage): Promise<Result<boolean>>;
    saveContent(fileVersion: IFileVersion, info?: IStorage): Promise<Result<boolean>>;
    copy(file: IFile, withoutContent?: boolean): Result<IFile>;
    setExternalContent(file: IFile, externalFileVersion: IFileVersion | null): boolean;
    setExternalContent(file: IFile, fileSource: CardFileContentSource | null): boolean;
    getLink(file: IFile, info?: IStorage, withVersion?: boolean): string;
    getLink(fileVersion: IFileVersion, info?: IStorage): string;
    getLinkData(file: IFile, info?: IStorage): IStorage | null;
    getLinkData(fileVersion: IFileVersion, info?: IStorage): IStorage | null;
    tryGetSourceObjectId(_file: IFile): guid | null;
    getNewFilePermissions(): IFilePermissions;
    notifyAdded(_file: IFile, _isVirtual: boolean): void;
    notifyRemoved(_file: IFile): void;
    notifyReverted(_file: IFile): void;
    notifyCategoryModified(_file: IFile): void;
    notifyNameModified(_file: IFile): void;
    notifyContentModified(_file: IFile): void;
    notifyContentReplaced(_file: IFile): void;
    notifyOriginModified(_file: IFile): void;
    notifyOptionsModified(_file: IFile): void;
    notifyNewVersionTagsModified(_file: IFile): void;
    notifySignAdded(_signature: IFileSignature): void;
    notifySignRemoved(_signature: IFileSignature): void;
    notifySignModified(_signature: IFileSignature): void;
}
