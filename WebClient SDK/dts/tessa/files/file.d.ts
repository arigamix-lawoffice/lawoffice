import { IFileSource } from './fileSource';
import { FileCategory } from './fileCategory';
import { FileType } from './fileType';
import { FileEntity, IFileEntity } from './fileEntity';
import { FilePermissionsSealed } from './filePermissions';
import { IFileVersion } from './fileVersion';
import { FileSignatureLoadingMode } from './fileSignatureLoadingMode';
import { FileTag } from './fileTag';
import { IStorage } from 'tessa/platform/storage';
import { ValidationResult } from 'tessa/platform/validation';
import { Result } from 'tessa/platform';
import { CardFileContentSource } from 'tessa/cards';
export interface IFile extends IFileEntity {
    name: string;
    readonly size: number;
    category: FileCategory | null;
    type: FileType;
    readonly permissions: FilePermissionsSealed;
    readonly isLocal: boolean;
    origin: IFile | null;
    readonly versions: IFileVersion[];
    readonly lastVersion: IFileVersion;
    versionAdded: IFileVersion | null;
    versionsAreComprehensive: boolean;
    readonly options: IStorage;
    readonly requestInfo: IStorage;
    readonly info: IStorage;
    readonly wasModified: boolean;
    readonly newVersionTags: FileTag[];
    isDirty: boolean;
    initialState: IFileState;
    created: string | null;
    createdById: guid | null;
    createdByName: string | null;
    modified: string | null;
    modifiedById: guid | null;
    modifiedByName: string | null;
    getRootedOrigin(): IFile | null;
    ensureVersionsLoaded(): Promise<ValidationResult>;
    ensureContentDownloaded(): Promise<ValidationResult>;
    ensureContentModified(): Promise<ValidationResult>;
    ensureSignaturesLoaded(loadingMode: FileSignatureLoadingMode): Promise<ValidationResult>;
    replace(content: File, changeName: boolean): any;
    replace(name: string, size: number, changeName: boolean): any;
    copy(withoutContent?: boolean): Result<IFile>;
    changeCategory(newCategory: FileCategory | null): any;
    changeName(newName: string): any;
    getExtension(): string;
    clone(source: IFileSource): IFile;
    setExternalContent(externalFileVersion: IFileVersion | null): boolean;
    setExternalContent(fileSource: CardFileContentSource | null): boolean;
    updateInitialState(): any;
    revert(): Promise<ValidationResult>;
    invalidateContent(): Promise<ValidationResult>;
}
export interface IFileState {
    name: string;
    category: FileCategory | null;
    type: FileType;
    origin: IFile | null;
}
export declare class TessaFile extends FileEntity implements IFile {
    constructor(id: guid, name: string, category: FileCategory | null, type: FileType, source: IFileSource, permissions: FilePermissionsSealed | null, modified?: string | null, modifiedById?: guid | null, modifiedByName?: string | null, created?: string | null, createdById?: guid | null, createdByName?: string | null, isLocal?: boolean, origin?: IFile | null);
    private _name;
    private _category;
    private _type;
    private _origin;
    private _versionAdded;
    private _wasModified;
    private _initialState;
    private _modified;
    private _modifiedById;
    private _modifiedByName;
    private _created;
    private _createdById;
    private _createdByName;
    get modified(): string | null;
    protected set modified(value: string | null);
    get modifiedById(): guid | null;
    protected set modifiedById(value: guid | null);
    get modifiedByName(): string | null;
    protected set modifiedByName(value: string | null);
    get created(): string | null;
    protected set created(value: string | null);
    get createdById(): guid | null;
    protected set createdById(value: guid | null);
    get createdByName(): string | null;
    protected set createdByName(value: string | null);
    get name(): string;
    set name(value: string);
    get category(): FileCategory | null;
    set category(value: FileCategory | null);
    get type(): FileType;
    set type(value: FileType);
    readonly permissions: FilePermissionsSealed;
    readonly isLocal: boolean;
    get origin(): IFile | null;
    set origin(value: IFile | null);
    readonly versions: IFileVersion[];
    get lastVersion(): IFileVersion;
    get size(): number;
    get versionAdded(): IFileVersion | null;
    set versionAdded(value: IFileVersion | null);
    versionsAreComprehensive: boolean;
    readonly options: IStorage;
    readonly requestInfo: IStorage;
    readonly info: IStorage;
    get wasModified(): boolean;
    readonly newVersionTags: FileTag[];
    get isDirty(): boolean;
    set isDirty(value: boolean);
    get initialState(): IFileState;
    getRootedOrigin(): IFile | null;
    ensureVersionsLoaded(): Promise<ValidationResult>;
    ensureContentDownloaded(): Promise<ValidationResult>;
    ensureContentModified(): Promise<ValidationResult>;
    ensureSignaturesLoaded(loadingMode?: FileSignatureLoadingMode): Promise<ValidationResult>;
    replace(content: File, changeName: boolean): void;
    replace(name: string, size: number, changeName: boolean): void;
    copy(withoutContent?: boolean): Result<IFile>;
    changeName(newName: string): void;
    changeCategory(newCategory: FileCategory | null): void;
    changeOrigin(newOrigin: IFile | null): void;
    getExtension(): string;
    clone(source: IFileSource): IFile;
    setExternalContent(externalFileVersion: IFileVersion | null): boolean;
    setExternalContent(fileSource: CardFileContentSource | null): boolean;
    updateInitialState(): void;
    revert(): Promise<ValidationResult>;
    invalidateContent(): Promise<ValidationResult>;
}
export declare const ExternalContentFileIdKey = ".externalContentFileId";
