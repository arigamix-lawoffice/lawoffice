import { KrPermissionFlagDescriptor } from './krPermissionFlagDescriptor';
import { KrPermissionExtendedCardSettings } from './krPermissionExtendedCardSettings';
import { CardStorageObject } from 'tessa/cards/cardStorageObject';
import { IStorage } from 'tessa/platform/storage';
export declare class KrToken extends CardStorageObject {
    constructor(storage: IStorage);
    static readonly krTokenKey: string;
    static readonly cardIdKey: string;
    static readonly cardVersionKey: string;
    static readonly permissionsKey: string;
    static readonly expiryDateKey: string;
    static readonly signatureKey: string;
    static readonly infoKey: string;
    static readonly permissionsVersionKey: string;
    static readonly extendedCardSettingsKey: string;
    private _permissions;
    private _extendedCardSettings;
    get cardId(): guid;
    set cardId(value: guid);
    get cardVersion(): number;
    set cardVersion(value: number);
    get permissions(): Set<KrPermissionFlagDescriptor>;
    set permissions(value: Set<KrPermissionFlagDescriptor>);
    get expiryDate(): string;
    set expiryDate(value: string);
    get signature(): string;
    set signature(value: string);
    get permissionsVersion(): number;
    set permissionsVersion(value: number);
    get info(): IStorage;
    set info(value: IStorage);
    get extendedCardSettings(): KrPermissionExtendedCardSettings | null;
    set extendedCardSettings(value: KrPermissionExtendedCardSettings | null);
    clone(): KrToken;
    tryGetInfo(): IStorage | null | undefined;
    private initPermissions;
    hasPermission(krPermission: KrPermissionFlagDescriptor): boolean;
    setInfo(cardInfo: IStorage): void;
    static tryGet(cardInfo: IStorage): KrToken | null;
    static contains(cardInfo: IStorage): boolean;
    static remove(cardInfo: IStorage): boolean;
}
