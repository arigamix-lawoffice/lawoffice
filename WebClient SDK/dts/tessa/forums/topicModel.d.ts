import { MessageModel } from './messageModel';
import { ValidationStorageObject } from 'tessa/platform/validation';
import { ArrayStorage, IStorage, IStorageValueFactory } from 'tessa/platform/storage';
export declare class TopicModel extends ValidationStorageObject {
    constructor(storage?: IStorage);
    static readonly idKey: string;
    static readonly titleKey: string;
    static readonly descriptionKey: string;
    static readonly createdKey: string;
    static readonly isArchivedKey: string;
    static readonly lastUpdateDateTimeKey: string;
    static readonly authorIdKey: string;
    static readonly authorNameKey: string;
    static readonly readByDefaultKey: string;
    static readonly lastMessageAuthorIdKey: string;
    static readonly lastMessageAuthorNameKey: string;
    static readonly lastReadMessageTimeKey: string;
    static readonly messagesKey: string;
    static readonly messagesCountKey: string;
    static readonly currentMessageNumberKey: string;
    static readonly currentParticipantInfoKey: string;
    static readonly typeIdKey: string;
    get id(): guid;
    set id(value: guid);
    get title(): string | null;
    set title(value: string | null);
    get description(): string | null;
    set description(value: string | null);
    get created(): string | null;
    set created(value: string | null);
    get isArchived(): boolean;
    set isArchived(value: boolean);
    get lastUpdateDateTime(): string | null;
    set lastUpdateDateTime(value: string | null);
    get authorId(): string | null;
    set authorId(value: string | null);
    get authorName(): string | null;
    set authorName(value: string | null);
    get readByDefault(): boolean;
    set readByDefault(value: boolean);
    get lastMessageAuthorId(): string | null;
    set lastMessageAuthorId(value: string | null);
    get lastMessageAuthorName(): string | null;
    set lastMessageAuthorName(value: string | null);
    get lastReadMessageTime(): string | null;
    set lastReadMessageTime(value: string | null);
    get messages(): ArrayStorage<MessageModel>;
    set messages(value: ArrayStorage<MessageModel>);
    get messagesCount(): number;
    set messagesCount(value: number);
    get currentMessageNumber(): number;
    set currentMessageNumber(value: number);
    get currentParticipantInfo(): IStorage;
    set currentParticipantInfo(value: IStorage);
    get typeId(): guid;
    set typeId(value: guid);
    tryGetTopics(): ArrayStorage<MessageModel> | null | undefined;
    private static readonly _messageFactory;
    isEmpty(): boolean;
    clean(): void;
    ensureCacheResolved(): void;
}
export declare class TopicModelFactory implements IStorageValueFactory<TopicModel> {
    getValue(storage: IStorage): TopicModel;
    getValueAndStorage(): {
        value: TopicModel;
        storage: IStorage;
    };
}
