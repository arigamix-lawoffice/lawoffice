import { ForumPermissionsResponse, ForumResponse } from './forumResponse';
import { MessageModel } from './messageModel';
import { TopicModel } from './topicModel';
import { ParticipantType } from './enums';
import { Card } from 'tessa/cards';
import { IStorage } from 'tessa/platform/storage';
import { ValidationResult } from 'tessa/platform/validation';
import { ItemModel } from './itemModel';
import { ForumSettingsModel } from './forumSettingsModel';
import { ParticipantModel } from '.';
export declare class ForumProvider {
    private constructor();
    private static _instance;
    static get instance(): ForumProvider;
    static readonly ForumKey = "forum";
    static readonly ResponseSatelliteIdKey: string;
    static readonly TopicModelKey = "TopicModel";
    private _forumResponseFactory;
    private _forumPermissionsResponseFactory;
    private static forumRequestWithoutResponse;
    private static forumRequestWithResult;
    checkPermissionByFile(fileId: guid, isSuperModeratorModeEnabled: boolean): Promise<ValidationResult>;
    archiveTopic(topicId: guid, isArchived?: boolean): Promise<ValidationResult>;
    setForumSettings(settings: ForumSettingsModel): Promise<ValidationResult>;
    getTopicsWithMessages(cardId: guid, isSuperModeratorModeEnabled: boolean, messagesInTopicCount: number, lastDate: string, topicTypeId?: string): Promise<[ForumResponse, ValidationResult]>;
    getTopic(id: guid, isSuperModeratorModeEnabled: boolean, permissionsToken?: IStorage, singletonMode?: boolean, topicTypeId?: guid): Promise<[ForumResponse, ValidationResult]>;
    sendMessage(topicId: guid, message: MessageModel, isSuperModeratorModeEnabled: boolean, getFileContent: (id: guid) => File | null): Promise<[ForumResponse, ValidationResult]>;
    updateMessage(topicId: guid, message: MessageModel, isSuperModeratorModeEnabled: boolean, getFileContent: (id: guid) => File | null): Promise<[ForumResponse, ValidationResult]>;
    addTopic(cardId: guid, topicModel: TopicModel): Promise<[ForumResponse, ValidationResult]>;
    getMessages(topicId: guid, isSuperModeratorModeEnabled: boolean, messagesCount: number, pageNumber?: number, lastReadMessageTime?: string | null, messageId?: guid | null, isNeedUpdateLastReadMessageTime?: boolean, searchText?: string, reverseOrder?: boolean): Promise<[ForumResponse, ValidationResult]>;
    addParticipants(topicId: guid, participants: guid[], isReadOnly: boolean, type?: ParticipantType, isSubscribed?: boolean): Promise<[ForumResponse, ValidationResult]>;
    updateParticipants(topicId: guid, participants: guid[], isReadOnly: boolean, isSubscribed?: boolean, type?: ParticipantType): Promise<ValidationResult>;
    removeParticipants(topicId: guid, participants: guid[]): Promise<[ForumResponse, ValidationResult]>;
    addRoles(topicId: guid, roles: guid[], isReadOnly: boolean, isSubscribed?: boolean): Promise<ValidationResult>;
    updateRoles(topicId: guid, roles: guid[], isReadOnly: boolean, isSubscribed?: boolean): Promise<ValidationResult>;
    removeRoles(topicId: guid, roles: guid[]): Promise<[ForumResponse, ValidationResult]>;
    subscribe(topicId: guid, isSubscribed?: boolean): Promise<ValidationResult>;
    saveAttachments(satelliteId: guid, message: MessageModel, getFileContent: (id: guid) => File | null): Promise<ValidationResult | null>;
    saveAttachmentsToCard(satelliteId: guid, items: readonly ItemModel[], getFileContent: (id: guid) => File | null): Promise<ValidationResult>;
    createEmptyForumSatellite(satelliteId: guid): Promise<Card | null>;
    addTopicPermissionRequest(cardId: guid, permissionsToken?: IStorage | null): Promise<[ForumPermissionsResponse, ValidationResult]>;
    superModeratorPermissionRequest(cardId: guid, permissionsToken?: IStorage | null): Promise<[ForumPermissionsResponse, ValidationResult]>;
    resolveUserPermissionsAsync(topicId: guid, checkSuperModeratorMode?: boolean, permissionsToken?: IStorage | null): Promise<[ParticipantModel, ValidationResult]>;
    checkEditMessagesPermissionAsync(topicId: guid, isMyMessage?: boolean, permissionsToken?: IStorage | null): Promise<[ForumPermissionsResponse, ValidationResult]>;
}
