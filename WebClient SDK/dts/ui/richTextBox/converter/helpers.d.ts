import { HtmlFormat } from '..';
import { IHtmlConversionConfig } from './config';
export declare const supportedTags: string[];
export declare function convertStringToDomElement(html: string, container?: string): HTMLElement;
export declare function getHtmlFormat(html: string, dataTypes?: ReadonlyArray<string>): HtmlFormat;
export declare function tryTraverse(e: ChildNode, callback: (e: any) => boolean, maxRetries: number): boolean;
export declare function mergeInlineParagraphsIntoLists(e: Element): boolean;
export declare function convertMarginsToDepth(e: Element, accumulatedDepth?: boolean, excludeZeroMargin?: boolean): void;
export declare function normalizeDepth(e: Element): void;
export declare function domElementToAttributes(e: Element, config: IHtmlConversionConfig): boolean;
export declare function convertDomElement(e: Element, config: IHtmlConversionConfig): boolean;
export declare function normalizeDomNode(node: ChildNode, config: IHtmlConversionConfig): boolean;
export declare function cloneStyle(source: HTMLElement, target: HTMLElement): void;
export declare function isVoid(e: ChildNode): boolean;
export declare function iterateChildNodes(e: ChildNode, callback: (c: ChildNode) => void): void;
export declare function unwrapDomElement(node: ChildNode, config: IHtmlConversionConfig): void;
export declare function wrapDomElement(e: Element, tagName: string): void;
export declare function collectAffectingStyles(e: HTMLElement, maxDepth?: number): void;
export declare function hasTextDecoration(style: CSSStyleDeclaration, name: string): boolean;
export declare function domElementToStyle(e: HTMLElement, config: IHtmlConversionConfig): boolean;
export declare function normalizeStyle(e: ChildNode, config: IHtmlConversionConfig): boolean;
export declare function cleanStyleProps(e: ChildNode, allowed: string[]): void;
export declare function traverse(e: ChildNode, callback: (e: ChildNode) => boolean): boolean;
export declare function normalizeStyleValues(e: HTMLElement, config: IHtmlConversionConfig, colorConverter: HTMLElement): boolean;
export declare function whitelistProp(prop: string, isAllowed: (p: string) => boolean): string;
export declare function buildLists(e: Element, config: IHtmlConversionConfig): boolean;
export declare function wrapRootLists(e: Element): boolean;
export declare function wrapNestedLists(e: Element, depth: number): boolean;
export declare function getElementMarginsSum(e: HTMLElement): number;
export declare function propToInt(propValue: string): number;
export declare function isDomElement(n: ChildNode): n is Element;
export declare function isDomText(n: ChildNode): n is Text;
export declare function isDomHtmlElement(n: ChildNode): n is HTMLElement;
