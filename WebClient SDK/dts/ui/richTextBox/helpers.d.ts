import { Editor, Point, Range, Path, Node, NodeEntry, Ancestor } from 'slate';
import { NodeType, CursorPositionType, RangeStyle, SelectionInfo, ImageData, ImageResizeHandler, TessaEditor, RichTextBoxAttachmentInnerItem, TextAlign } from './common';
import { RGBColor } from 'react-color';
export declare function unhangSelection(editor: Editor): void;
export declare function unhangInlines(editor: Editor): void;
export declare function unhangLinkStart(editor: Editor): void;
export declare function unhangImages(editor: Editor, reverse?: boolean): void;
export declare function isAnchor(node: Node): boolean;
export declare function isParagraph(node: Node): boolean;
export declare function isImage(node: Node): boolean;
export declare function isLink(node: Node): boolean;
export declare function isBlock(node: Node): boolean;
export declare function isInlineBlock(node: Node): boolean;
export declare function isList(node: Node): boolean;
export declare function isListItem(node: Node): boolean;
export declare function isInQuoteBlock(editor: Editor, point: Point): boolean;
export declare function hasImages(editor: Editor): boolean;
export declare function isFirstParagraph(editor: Editor, point: Point): boolean;
export declare function isAtStartOfLeaf(editor: Editor, point: Point): boolean;
export declare function isAtEndOfLeaf(editor: Editor, point: Point): boolean;
export declare function isAtStartOfElement(editor: Editor, point: Point, elevation?: number): boolean;
export declare function isAtEndOfElement(editor: Editor, point: Point, elevation?: number): boolean;
export declare function isAtStartOfDocument(editor: Editor, point: Point): boolean;
export declare function isAtEndOfDocument(editor: Editor, point: Point): boolean;
export declare function isAtTextStart(editor: Editor, point: Point): boolean;
export declare function isAtTextEnd(editor: Editor, point: Point): boolean;
export declare function isPathInsideInlineElement(editor: Editor, path: Path): boolean;
export declare function isRangeInsideInlineElement(editor: Editor, range: Range): boolean;
export declare function isNestedIn(editor: Editor, path: Path, match: (n: Ancestor) => boolean): boolean;
export declare function getParentBlock(editor: Editor, range: Range): NodeEntry<Node> | [null, null];
export declare function getFirstNonInlineParent(editor: Editor, point: Point): NodeEntry;
export declare function nextNodeType(editor: Editor, path: Path): NodeType | undefined;
export declare function prevNodeType(editor: Editor, path: Path): NodeType | undefined;
export declare function nextInlineBlockType(editor: Editor, point: Point): NodeType | undefined;
export declare function isReadOnly(editor: Editor, range: Range): boolean;
export declare function isInsideParentType(editor: Editor, range: Range, type: NodeType): boolean;
export declare function isAllowedAfterQuote(type: NodeType | undefined): boolean;
export declare function iterateChildren(editor: Editor, path: Path, range: Range, callback: (node: Node, path: Path) => void): void;
export declare function splitSelection(editor: Editor, commonPath: Path, shouldSkip?: (entry: NodeEntry, isEnd: boolean) => boolean): void;
export declare function splitBranch(editor: Editor, start: Path, end: Path, inclusive?: boolean, shouldSkip?: (entry: NodeEntry, isEnd: boolean) => boolean): void;
export declare function getRangeText(editor: Editor, range: Range): string;
export declare function hasTextInRange(editor: Editor, range: Range, skip?: (p: Point) => boolean): boolean;
export declare function getSelectionType(editor: Editor): SelectionInfo;
export declare function getCursorPositionType(editor: Editor): CursorPositionType;
export declare function getClosestMatchingAncestor(editor: Editor, path: Path, match: (n: Node) => boolean): [Node | undefined, Path | undefined];
export declare function getPrevChild(editor: Editor, path: Path): NodeEntry<Node> | [null, null];
export declare function getNextChild(editor: Editor, path: Path): NodeEntry<Node> | [null, null];
export declare function pastedItemToImageData(item: DataTransferItem): ImageData;
export declare function attachmentToImageData(attachment: RichTextBoxAttachmentInnerItem): ImageData | null;
export declare function createImageThumbnail(file: File, maxWidth: number, maxHeight: number, minSize: number, onImageResized: ImageResizeHandler): void;
export declare function rgbaStringToHex(c: string): string;
export declare function rgbaToHex(c: RGBColor): string;
export declare function hexToRgba(c: string): string;
export declare function getSelectionTextAlign(editor: TessaEditor): TextAlign | undefined;
export declare function getSelectionStyle(editor: TessaEditor): RangeStyle;
export declare function lastIn(array: Path): number;
export declare function firstIn(path: Path): number;
export declare function indexIn(path: Path, at: number): number | undefined;
